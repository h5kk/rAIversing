{
    "FUN_000816a6": {
        "renaming": {
            "FUN_000816a6": "doNothing_000816a6"
        }, 
        "code": "void doNothing_000816a6(void) {\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000816a6", 
        "calling": [
            "FUN_000816a8"
        ], 
        "imported": true, 
        "current_name": "doNothing_000816a6"
    }, 
    "FUN_000816a8": {
        "renaming": {
            "setFlagInGlobalVariable_000816d4": "set_global_variable_flag", 
            "doNothing_000816a6": "do_nothing", 
            "FUN_000816a8": "initialize_system_and_loop_000816a8", 
            "doNothing_0008120c": "do_nothing_with_parameter", 
            "initialize_system_000804a8": "initialize_system_2", 
            "FUNC_000805d0": "FUNC_FUNCTION_1", 
            "initialize_system_00080ae4": "initialize_system", 
            "checkOffsets_00080ce0": "check_offsets", 
            "DAT_000816d0": "global_variable"
        }, 
        "code": "void initialize_system_and_loop_000816a8(void)\\n{\\n  set_DAT_000816d0_flag();\\n  initialize_system();\\n  doNothing_000816a6();\\n  doNothing_000816a6_with_parameter(1);\\n  initialize_system_2();\\n  while (true) {\\n    while (DAT_000816d0 == 0) {\\n      FUNC_FUNCTION_1();\\n    }\\n    check_offsets();\\n  }\\n}", 
        "called": [
            "FUN_000816d4", 
            "FUN_00080ce0", 
            "FUN_0008120c", 
            "FUN_000805d0", 
            "FUN_00080ae4", 
            "FUN_000804a8", 
            "FUN_000816a6"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000816a8", 
        "calling": [
            "FUN_00080f24"
        ], 
        "imported": true, 
        "current_name": "initialize_system_and_loop_000816a8"
    }, 
    "FUN_00081042": {
        "renaming": {
            "FUN_00081042": "setValues_00081042", 
            "param_1": "memory_address", 
            "param_2": "value1", 
            "param_3": "value2", 
            "param_4": "value3"
        }, 
        "code": "void setValues_00081042(uint32_t *memory_address, uint32_t value1, uint32_t value2, uint32_t value3) {\\n  uint32_t mask1 = 0xf << 0x18;\\n  uint32_t mask2 = 3 << 0x1c;\\n  uint32_t *memory_location = memory_address + 1;\\n  *memory_location = value3 | *memory_location | ((value1 & mask1) | (value2 & mask2));\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081042", 
        "calling": [
            "FUN_00080ae4"
        ], 
        "imported": true, 
        "current_name": "setValues_00081042"
    }, 
    "FUN_00082ac0": {
        "renaming": {
            "iVar2": "function_status", 
            "FUN_00082ac0": "process_input_data_block_00082ac0", 
            "i": "current_data_block_data_index", 
            "param_1": "parameter_1", 
            "piVar3": "current_data_block", 
            "puVar5": "current_data_block_data_pointer", 
            "piVar1": "current_data_pointer", 
            "param_2": "data_size", 
            "param_3": "data_pointer", 
            "uVar4": "current_data_block_data", 
            "uVar7": "current_data_block_count", 
            "uVar6": "current_data_block_size"
        }, 
        "code": "int process_input_data_block_00082ac0(uint32_t parameter_1, int data_size, int **data_pointer)\\n{\\n  int *current_data_pointer;\\n  int *current_data_block;\\n  uint current_data_block_size;\\n  uint current_data_block_count;\\n  undefined4 *current_data_block_data;\\n  uint i;\\n  int function_status;\\n  if (-1 < *(int *)(data_size + 100) << 0x12) {\\n    function_status = FUNC_FUNCTION_00083f34();\\n    data_pointer[2] = (int *)0x0;\\n    data_pointer[1] = (int *)0x0;\\n    return function_status;\\n  }\\n  current_data_block = data_pointer[2];\\n  current_data_pointer = *data_pointer;\\n  while (current_data_block != (int *)0x0) {\\n    current_data_block_size = current_data_pointer[1];\\n    current_data_block_count = current_data_block_size >> 2;\\n    if (current_data_block_count != 0) {\\n      current_data_block_data = (undefined4 *)(*current_data_pointer + -4);\\n      i = 0;\\n      do {\\n        current_data_block_data = current_data_block_data + 1;\\n        function_status = process_input_data(parameter_1, *current_data_block_data, data_size);\\n        i = i + 1;\\n        if (function_status == -1) goto LAB_00082b00;\\n      } while (current_data_block_count != i);\\n      current_data_block = data_pointer[2];\\n    }\\n    current_data_block = (int *)((int)current_data_block - (current_data_block_size & 0xfffffffc));\\n    data_pointer[2] = current_data_block;\\n    current_data_pointer = current_data_pointer + 2;\\n  }\\n  function_status = 0;\\nLAB_00082b00:\\n  data_pointer[2] = (int *)0x0;\\n  data_pointer[1] = (int *)0x0;\\n  return function_status;\\n}", 
        "called": [
            "FUN_00083c40", 
            "FUN_00083f34"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00082ac0", 
        "calling": [
            "FUN_00082b38"
        ], 
        "imported": true, 
        "current_name": "process_input_data_block_00082ac0"
    }, 
    "FUN_00080ce0": {
        "renaming": {
            "iVar1": "offsetDifference", 
            "PTR_DAT_00080d20": "offset4", 
            "FUN_00080ce0": "checkOffsets_00080ce0", 
            "PTR_DAT_00080d18": "offset2", 
            "PTR_DAT_00080d14": "offset1", 
            "PTR_DAT_00080d1c": "offset3"
        }, 
        "code": "void checkOffsets_00080ce0()\\n{\\n  int offsetDifference = getDifferenceFromOffsets_000813e4(PTR_DAT_00080d14);\\n  if (offsetDifference != 0) {\\n    doNothing_00080aa8();\\n  }\\n  offsetDifference = getDifferenceFromOffsets_000813e4(PTR_DAT_00080d18);\\n  if (offsetDifference != 0) {\\n    doNothing_00080ab8();\\n  }\\n  offsetDifference = getDifferenceFromOffsets_000813e4(PTR_DAT_00080d1c);\\n  if (offsetDifference != 0) {\\n    doNothing_00080aba();\\n  }\\n  offsetDifference = getDifferenceFromOffsets_000813e4(PTR_DAT_00080d20);\\n  if (offsetDifference != 0) {\\n    doNothing_00080abc();\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_00080abc", 
            "FUN_00080ab8", 
            "FUN_00080aba", 
            "FUN_000813e4", 
            "FUN_00080aa8"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080ce0", 
        "calling": [
            "FUN_000816a8"
        ], 
        "imported": true, 
        "current_name": "checkOffsets_00080ce0"
    }, 
    "FUN_00081682": {
        "renaming": {
            "uVar1": "null_terminator_index", 
            "FUN_00081682": "process_input_string_00081682", 
            "param_1": "data", 
            "param_2": "size"
        }, 
        "code": "undefined4 process_input_string_00081682(undefined4 *data, int size)\\n{\\n  undefined4 null_terminator_index;\\n  *data = 0;\\n  data[1] = 0;\\n  data[2] = 0;\\n  if (size != 0) {\\n    null_terminator_index = find_null_terminator_index(size);\\n    process_data(data, size, null_terminator_index);\\n  }\\n  return data;\\n}", 
        "called": [
            "FUN_0008165c", 
            "FUN_00082a50"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081682", 
        "calling": [
            "FUN_00080a68"
        ], 
        "imported": true, 
        "current_name": "process_input_string_00081682"
    }, 
    "FUN_000815fe": {
        "renaming": {
            "FUN_000815fe": "execute_skipped_function_with_param_000815fe", 
            "param_1": "param", 
            "execute_skipped_function_00081e04": "execute_skipped_function"
        }, 
        "code": "undefined4 execute_skipped_function_with_param_000815fe(undefined4 *param)\\n{\\n  execute_skipped_function(param);\\n  return param;\\n}", 
        "called": [
            "FUN_00081e04"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000815fe", 
        "calling": [], 
        "imported": true, 
        "current_name": "execute_skipped_function_with_param_000815fe"
    }, 
    "FUN_00081d1c": {
        "renaming": {
            "uVar1": "exponent", 
            "param_1": "input", 
            "FUN_00081d1c": "calculate_00081d1c", 
            "exponent_mask": "0x7f800000", 
            "sign_bit": "0x80000000", 
            "fraction_mask": "0x7fffff"
        }, 
        "code": "uint32_t calculate_00081d1c(uint32_t input) {\\n  uint32_t sign_bit = 0x80000000;\\n  uint32_t exponent_mask = 0x7f800000;\\n  uint32_t fraction_mask = 0x7fffff;\\n  if ((input & sign_bit) || (input << 1) < exponent_mask) {\\n    return 0;\\n  }\\n  uint32_t exponent = 0x9e - ((input << 1) >> 0x18);\\n  if ((int32_t)exponent >= 0) {\\n    return (input << 8 | sign_bit) >> (exponent & 0xff);\\n  }\\n  if ((exponent == 0xffffff9f) && ((input & fraction_mask) != 0)) {\\n    return 0;\\n  }\\n  return 0xffffffff;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081d1c", 
        "calling": [
            "FUN_000805d0"
        ], 
        "imported": true, 
        "current_name": "calculate_00081d1c"
    }, 
    "FUN_000847ac": {
        "renaming": {
            "uVar1": "value1", 
            "param_1": "input1", 
            "lVar2": "result", 
            "FUN_000847ac": "calculateValues_000847ac", 
            "param_2": "input2", 
            "param_3": "input3", 
            "param_4": "input4", 
            "param_5": "output"
        }, 
        "code": "void calculateValues_000847ac(uint32_t input1, int input2, uint32_t input3, uint32_t input4, int *output)\\n{\\n  long long result = FUNC_00084a80();\\n  result *= (long long)input3 * input4;\\n  uint32_t value1 = input1 - (uint32_t)result;\\n  uint32_t value2 = input2 - ((int)(result >> 32) + (input1 < (uint32_t)result));\\n  output[0] = value1;\\n  output[1] = value2;\\n  return;\\n}", 
        "called": [
            "FUN_00084a80"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000847ac", 
        "calling": [
            "FUN_00084750"
        ], 
        "imported": true, 
        "current_name": "calculateValues_000847ac"
    }, 
    "FUN_00080aa8": {
        "renaming": {
            "FUN_00080aa8": "doNothing_00080aa8"
        }, 
        "code": "void doNothing_00080aa8(void) {\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080aa8", 
        "calling": [
            "FUN_00080ce0"
        ], 
        "imported": true, 
        "current_name": "doNothing_00080aa8"
    }, 
    "FUN_00080118": {
        "renaming": {
            "DAT_00080134": "shouldUseGlobalVariable", 
            "DAT_00080144": "callbackFunction", 
            "PTR_DAT_0008013c": "globalVariablePointer", 
            "param_1": "param1", 
            "FUN_00080118": "executeFunction_00080118", 
            "param_2": "param2", 
            "param_3": "param3", 
            "param_4": "param4", 
            "DAT_00080140": "functionPointer"
        }, 
        "code": "void executeFunction_00080118(undefined4 param1, undefined *param2, undefined4 param3, undefined4 param4) {\\n  if (DAT_00080134) {\\n    param2 = PTR_DAT_0008013c;\\n  }\\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\\n    (*DAT_00080144)(DAT_00080140, param2, param3, DAT_00080144, param4);\\n  }\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080118", 
        "calling": [
            "FUN_00081d7c"
        ], 
        "imported": true, 
        "current_name": "executeFunction_00080118"
    }, 
    "FUN_00081c94": {
        "renaming": {
            "concatenate_params_to_64bit_word_00081c5c": "concatenate_params_to_64bit_word", 
            "in_ZR": "zero_flag", 
            "in_CY": "carry_flag", 
            "FUN_00081c94": "concatenate_and_check_params_00081c94"
        }, 
        "code": "bool concatenate_and_check_params_00081c94()\\n{\\n  uint64_t concatenated_word = concatenate_params_to_64bit_word();\\n  bool carry_flag = 0;\\n  bool zero_flag = 0;\\n  if (concatenated_word > UINT32_MAX) {\\n    carry_flag = 1;\\n  }\\n  if (concatenated_word == 0) {\\n    zero_flag = 1;\\n  }\\n  return !carry_flag || zero_flag;\\n}", 
        "called": [
            "FUN_00081c5c"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081c94", 
        "calling": [
            "FUN_000805d0"
        ], 
        "imported": true, 
        "current_name": "concatenate_and_check_params_00081c94"
    }, 
    "FUN_00083b14": {
        "renaming": {
            "FUN_00083b14": "FUNC_00083b14"
        }, 
        "code": "\nvoid FUNC_00083b14(int param_1)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined4 *puVar5;\n  undefined4 *puVar6;\n  \n  if (*(int *)(param_1 + 0x38) == 0) {\n    puVar5 = *(undefined4 **)(param_1 + 4);\n    *(undefined **)(param_1 + 0x3c) = PTR_LAB_00083b08_1_00083bf4;\n    *(undefined4 *)(param_1 + 0x2e4) = 3;\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n    *(undefined4 *)(param_1 + 0x2e0) = 0;\n    *(undefined2 *)(puVar5 + 3) = 4;\n    *puVar5 = 0;\n    puVar5[1] = 0;\n    puVar5[2] = 0;\n    puVar5[0x19] = 0;\n    *(undefined2 *)((int)puVar5 + 0xe) = 0;\n    puVar5[4] = 0;\n    puVar5[5] = 0;\n    puVar5[6] = 0;\n    fillMemoryWithByte_00082504(puVar5 + 0x17,0,8);\n    puVar4 = PTR_LAB_000844bc_1_00083c04;\n    puVar3 = PTR_update_parameter_value_0008449c_1_00083c00;\n    uVar2 = DAT_00083bfc;\n    puVar1 = PTR_LAB_00084440_1_00083bf8;\n    puVar6 = *(undefined4 **)(param_1 + 8);\n    puVar5[7] = puVar5;\n    puVar5[8] = puVar1;\n    puVar5[9] = uVar2;\n    puVar5[10] = puVar3;\n    puVar5[0xb] = puVar4;\n    *(undefined2 *)((int)puVar6 + 0xe) = 1;\n    *(undefined2 *)(puVar6 + 3) = 9;\n    *puVar6 = 0;\n    puVar6[1] = 0;\n    puVar6[2] = 0;\n    puVar6[0x19] = 0;\n    puVar6[4] = 0;\n    puVar6[5] = 0;\n    puVar6[6] = 0;\n    fillMemoryWithByte_00082504(puVar6 + 0x17,0,8);\n    puVar5 = *(undefined4 **)(param_1 + 0xc);\n    puVar6[7] = puVar6;\n    puVar6[8] = puVar1;\n    puVar6[9] = uVar2;\n    puVar6[10] = puVar3;\n    puVar6[0xb] = puVar4;\n    *(undefined2 *)(puVar5 + 3) = 0x12;\n    *(undefined2 *)((int)puVar5 + 0xe) = 2;\n    *puVar5 = 0;\n    puVar5[1] = 0;\n    puVar5[2] = 0;\n    puVar5[0x19] = 0;\n    puVar5[4] = 0;\n    puVar5[5] = 0;\n    puVar5[6] = 0;\n    fillMemoryWithByte_00082504(puVar5 + 0x17,0,8);\n    puVar5[7] = puVar5;\n    puVar5[8] = puVar1;\n    puVar5[9] = uVar2;\n    puVar5[10] = puVar3;\n    puVar5[0xb] = puVar4;\n    *(undefined4 *)(param_1 + 0x38) = 1;\n  }\n  return;\n}\n\n", 
        "called": [
            "FUN_00082504"
        ], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x00083b14", 
        "calling": [
            "FUN_00083808", 
            "FUN_000846a4", 
            "FUN_000844c4", 
            "FUN_00083adc", 
            "FUN_00082b38"
        ], 
        "current_name": "FUNC_00083b14"
    }, 
    "FUN_000842a4": {
        "renaming": {
            "iVar2": "flag_result", 
            "local_50": "unused", 
            "iVar3": "result", 
            "uVar1": "parameter_flags", 
            "param_1": "parameter_value", 
            "auStack_54": "stack", 
            "param_2": "parameter_ptr", 
            "FUN_000842a4": "update_parameter_000842a4", 
            "uVar4": "flags_as_uint", 
            "bVar5": "is_2000"
        }, 
        "code": "void update_parameter_000842a4(int parameter_value, int *parameter_ptr)\\n{\\n  ushort parameter_flags = *(ushort *)(parameter_ptr + 3);\\n  uint flags_as_uint = (uint)parameter_flags;\\n  if ((int)(flags_as_uint << 0x1e) < 0) {\\n    *parameter_ptr = (int)parameter_ptr + 0x43;\\n    parameter_ptr[4] = (int)parameter_ptr + 0x43;\\n    parameter_ptr[5] = 1;\\n    return;\\n  }\\n  if (*(short *)((int)parameter_ptr + 0xe) >= 0) {\\n    int flag_result = set_flag_in_integer(parameter_value,(int)*(short *)((int)parameter_ptr + 0xe),auStack_54);\\n    if (flag_result >= 0) {\\n      bool is_2000 = (flags_as_uint & 0xf000) == 0x2000;\\n      if (((flags_as_uint & 0xf000) == 0x8000) && ((undefined *)parameter_ptr[10] == PTR_update_parameter_000842a4_value_0008449c_1_00084380)) {\\n        flag_result = 0x400;\\n        parameter_flags |= 0x400;\\n        parameter_ptr[0x13] = 0x400;\\n      }\\n      else {\\n        flag_result = 0x400;\\n        parameter_flags |= 0x800;\\n      }\\n      goto LAB_00084300;\\n    }\\n    parameter_flags = *(ushort *)(parameter_ptr + 3);\\n    flags_as_uint = (uint)parameter_flags;\\n  }\\n  parameter_flags |= 0x800;\\n  int flag_result = (flags_as_uint & 0x80) == 0 ? 0x400 : 0x40;\\n  bool is_2000 = false;\\nLAB_00084300:\\n  int result = FUNC_FUNCTION_2(parameter_value,flag_result);\\n  parameter_flags = *(ushort *)(parameter_ptr + 3);\\n  if (result == 0 && (int)((uint)parameter_flags << 0x16) >= 0) {\\n    parameter_flags |= 2;\\n    *parameter_ptr = (int)parameter_ptr + 0x43;\\n    parameter_ptr[4] = (int)parameter_ptr + 0x43;\\n    parameter_ptr[5] = 1;\\n  }\\n  else {\\n    *(undefined **)(parameter_value + 0x3c) = PTR_LAB_00083b08_1_0008437c;\\n    parameter_flags |= 0x80;\\n    *parameter_ptr = result;\\n    parameter_ptr[4] = result;\\n    parameter_ptr[5] = flag_result;\\n    if ((is_2000) && (flag_result = set_param_to_true_if_return_is_negative(parameter_value,(int)*(short *)((int)parameter_ptr + 0xe)), flag_result != 0)) {\\n      parameter_flags |= 1;\\n    }\\n  }\\n  *(ushort *)(parameter_ptr + 3) = parameter_flags;\\n  return;\\n}", 
        "called": [
            "FUN_000846dc", 
            "FUN_00081e14", 
            "FUN_000846b4"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000842a4", 
        "calling": [
            "FUN_00083808"
        ], 
        "imported": true, 
        "current_name": "update_parameter_000842a4"
    }, 
    "FUN_000846a4": {
        "renaming": {
            "iVar2": "process_result", 
            "iVar3": "data", 
            "uVar1": "result", 
            "param_1": "parameter", 
            "FUN_000846a4": "process_parameter_000846a4"
        }, 
        "code": "undefined4 process_parameter_000846a4(int parameter)\\n{\\n  undefined4 result = 0;\\n  int data = *DAT_000846b0;\\n  if (parameter != 0) {\\n    if ((data != 0) && (*(int *)(data + 0x38) == 0)) {\\n      initialize_data_00083b14();\\n    }\\n    if (*(short *)(parameter + 0xc) != 0) {\\n      result = process_data_00083adc(data, parameter);\\n      if ((*(code **)(parameter + 0x2c) != (code *)0x0) && ((int)(**(code **)(parameter + 0x2c))(data,*(undefined4 *)(parameter + 0x1c)) < 0)) {\\n        result = 0xffffffff;\\n      }\\n      if ((int)((uint)*(ushort *)(parameter + 0xc) << 0x18) < 0) {\\n        handle_error_00083d9c(data,*(undefined4 *)(parameter + 0x10));\\n      }\\n      if (*(int *)(parameter + 0x30) != 0) {\\n        if (*(int *)(parameter + 0x30) != parameter + 0x40) {\\n          handle_error_00083d9c(data);\\n        }\\n        *(undefined4 *)(parameter + 0x30) = 0;\\n      }\\n      if (*(int *)(parameter + 0x44) != 0) {\\n        handle_error_00083d9c(data);\\n        *(undefined4 *)(parameter + 0x44) = 0;\\n      }\\n      perform_nothing_00083c08();\\n      *(undefined2 *)(parameter + 0xc) = 0;\\n      perform_nothing_00083c0c();\\n      return result;\\n    }\\n  }\\n  return 0;\\n}", 
        "called": [
            "FUN_00083d9c", 
            "FUN_00083c08", 
            "FUN_00083b14", 
            "FUN_00083adc", 
            "FUN_00083c0c"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000846a4", 
        "calling": [], 
        "imported": true, 
        "current_name": "process_parameter_000846a4"
    }, 
    "FUN_00080f24": {
        "renaming": {
            "FUN_00080f24": "initialize_00080f24", 
            "PTR_DAT_00080f84": "section_bss_start", 
            "iVar3": "i", 
            "puVar2": "destination_pointer", 
            "puVar3": "zero_pointer", 
            "DAT_00080f7c": "section_rel_data_start", 
            "(*DAT_00080f98)()": "entry_point_function", 
            "PTR_Elf32_Rel_ARRAY_00080f80": "section_rel_data_start_copy", 
            "puVar1": "source_pointer", 
            "PTR_DAT_00080f90": "section_data_start_copy", 
            "DAT_00080f94": "section_bss_end + 8", 
            "DAT_00080f88": "section_bss_end"
        }, 
        "code": "void initialize_00080f24(void) {\\n  undefined *source_pointer = DAT_00080f7c;\\n  undefined *destination_pointer = PTR_Elf32_Rel_ARRAY_00080f80;\\n  undefined4 *zero_pointer = PTR_DAT_00080f84;\\n  if (PTR_Elf32_Rel_ARRAY_00080f80 != DAT_00080f7c) {\\n    for (int i = 0; source_pointer + i < section_rel_data_end; i = i + 4) {\\n      *(undefined4 *)(source_pointer + i) = *(undefined4 *)(destination_pointer + i);\\n    }\\n  }\\n  for (; zero_pointer < DAT_00080f88; zero_pointer = zero_pointer + 1) {\\n    *zero_pointer = 0;\\n  }\\n  undefined *memory_address = PTR_DAT_00080f90 - 0x20000000;\\n  *(uint *)(DAT_00080f94) = (uint)PTR_DAT_00080f90 & 0x1fffff80;\\n  if (memory_address < (undefined *)0x100000) {\\n    *(uint *)(DAT_00080f94) = *(uint *)(DAT_00080f94) | 0x20000000;\\n  }\\n  (*(*DAT_00080f98)())();\\n  while (true) {\\n    // Infinite loop\\n  }\\n}", 
        "called": [
            "FUN_000816a8"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080f24", 
        "calling": [], 
        "imported": true, 
        "current_name": "initialize_00080f24"
    }, 
    "FUN_00080e04": {
        "renaming": {
            "FUN_00080e04": "checkFlags_00080e04", 
            "uVar1": "data_flags", 
            "param_1": "data_address", 
            "param_2": "flags"
        }, 
        "code": "uint32_t checkFlags_00080e04(int32_t data_address, uint32_t flags) {\\n  uint32_t data_flags = *(uint32_t *)(data_address + 8) & flags;\\n  if (data_flags != 0) {\\n    if ((flags & *(uint32_t *)(data_address + 0x18)) == 0) {\\n      data_flags = 0;\\n    }\\n    else {\\n      data_flags = 1;\\n    }\\n  }\\n  return data_flags;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080e04", 
        "calling": [
            "FUN_00081318"
        ], 
        "imported": true, 
        "current_name": "checkFlags_00080e04"
    }, 
    "FUN_000804a8": {
        "renaming": {
            "FUN_000804a8": "initialize_system_000804a8", 
            "puVar2": "data_array_ptr_1", 
            "iVar6": "stored_value_plus_1000", 
            "puVar3": "data_array_ptr_3", 
            "puVar4": "data_array_ptr_4", 
            "puVar1": "data_array", 
            "uVar5": "stored_value"
        }, 
        "code": "undefined8 initialize_system_000804a8(void)\\n{\\n  handle_parameter(1, 0);\\n  handle_parameter(6, 1);\\n  handle_parameter(0, 1);\\n  handle_parameter(1, 1);\\n  update_parameter(0, 0);\\n  update_parameter(1, 0);\\n  undefined *data_array = data_array_ptr_1;\\n  undefined *data_array_2 = data_array_ptr_2;\\n  *(undefined2 *)(data_array_ptr_1 + 0xe) = 0x13;\\n  *(undefined2 *)(data_array + 0x10) = 10;\\n  *(undefined **)(data_array + 0x14) = data_array_ptr_3 + 0x26;\\n  data_array[1] = 3;\\n  data_array[0x19] = 3;\\n  *(undefined2 *)(data_array + 0x1a) = 0x14;\\n  *(undefined2 *)(data_array + 0x28) = 3;\\n  *(undefined2 *)(data_array + 4) = 0x10;\\n  *(undefined **)(data_array + 8) = data_array_ptr_1;\\n  data_array[0xd] = 0x10;\\n  *(undefined2 *)(data_array + 0x1c) = 0xc;\\n  data_array[0x25] = 0x10;\\n  *(undefined2 *)(data_array + 0x34) = 8;\\n  *(undefined2 *)(data_array + 0x26) = 0x1c;\\n  *(undefined **)(data_array + 0x2c) = data_array_ptr_3 + 0x38;\\n  data_array[0x30] = 2;\\n  data_array[0x31] = 2;\\n  *(undefined **)(data_array + 0x38) = data_array_ptr_2;\\n  data_array[0x3c] = 2;\\n  *data_array = 1;\\n  data_array[0xc] = 1;\\n  data_array[0x18] = 1;\\n  data_array[0x24] = 1;\\n  *(undefined2 *)(data_array + 0x3e) = 1;\\n  *(undefined2 *)(data_array + 0x40) = 1;\\n  *(undefined2 *)(data_array + 2) = 0;\\n  *(undefined **)(data_array + 0x20) = data_array_ptr_3 + 0x28;\\n  *(undefined2 *)(data_array + 0x32) = 0;\\n  data_array[0x3d] = 5;\\n  *(undefined **)(data_array + 0x44) = data_array_ptr_3 + 2;\\n  process_data(data_array_2, 0x4b00);\\n  *(undefined2 *)(data_array_ptr_3 + 0x56) = 2000;\\n  undefined4 stored_value = getStoredValue_thunk();\\n  *(undefined4 *)data_array_ptr_4 = stored_value;\\n  int stored_value_plus_1000 = getStoredValue_thunk() + 1000;\\n  *(int *)data_array_ptr_5 = stored_value_plus_1000;\\n  *(int *)data_array_ptr_6 = stored_value_plus_1000;\\n  *(int *)data_array_ptr_7 = stored_value_plus_1000;\\n  *(int *)data_array_ptr_8 = stored_value_plus_1000;\\n  *data_array_ptr_9 = 0;\\n  if (*(int *)data_array_ptr_10 == 0) {\\n    software_interrupt(0x3f);\\n    return 1;\\n  }\\n  return 0;\\n}", 
        "called": [
            "FUN_00080164", 
            "FUN_00081210", 
            "thunk_FUN_00081714", 
            "FUN_00081318"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000804a8", 
        "calling": [
            "FUN_000816a8"
        ], 
        "imported": true, 
        "current_name": "initialize_system_000804a8"
    }, 
    "FUN_000802da": {
        "renaming": {
            "FUN_000802da": "FUNC_000802da"
        }, 
        "code": "\nint FUNC_000802da(int param_1,ushort param_2,ushort *param_3)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined uVar3;\n  ushort uVar4;\n  uint uVar5;\n  ushort *puVar6;\n  char local_1c;\n  undefined local_1b;\n  ushort local_1a;\n  \n  uVar5 = (uint)param_2;\n  if (*(char *)(param_1 + 4) != '\\0') {\n    cVar1 = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(param_1 + 7) != '\\0') {\n    cVar1 = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < (byte)(local_1c - 1U)) {\n    cVar1 = -3;\n    goto LAB_000803cc;\n  }\n  *(char *)(param_1 + 9) = local_1c;\n  *(undefined *)(param_1 + 10) = local_1b;\n  *(ushort **)(param_1 + 0x4c) = param_3;\n  *(char *)(param_1 + 0xb) = (char)((uint)local_1a >> 8);\n  *(char *)(param_1 + 0xc) = (char)local_1a;\n  cVar1 = (char)param_2;\n  uVar3 = (undefined)(uVar5 >> 8);\n  switch(local_1b) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(param_1 + 0xd) = uVar3;\n    break;\n  case 5:\n    uVar4 = *param_3;\n    if (uVar4 != 0) {\n      uVar4 = 1;\n    }\n    *(char *)(param_1 + 0xd) = -(char)uVar4;\n    uVar5 = 0;\n    break;\n  case 6:\n    *(char *)(param_1 + 0xd) = (char)((uint)*param_3 >> 8);\n    uVar5 = (uint)*param_3;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    bVar2 = (byte)(param_2 >> 3) & 0xfe;\n    if ((param_2 & 0xf) != 0) {\n      bVar2 = bVar2 + 1;\n    }\n    *(char *)(param_1 + 0xe) = cVar1;\n    *(undefined *)(param_1 + 0xd) = uVar3;\n    *(byte *)(param_1 + 0xf) = bVar2;\n    uVar3 = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(param_1 + 0xd) = uVar3;\n    *(char *)(param_1 + 0xe) = cVar1;\n    param_3 = param_3 + -1;\n    *(char *)(param_1 + 0xf) = cVar1 * '\\x02';\n    *(undefined *)(param_1 + 0x49) = 7;\n    puVar6 = param_3 + uVar5;\n    while (param_3 != puVar6) {\n      bVar2 = *(byte *)(param_1 + 0x49);\n      *(char *)(param_1 + (uint)bVar2 + 9) = (char)((uint)param_3[1] >> 8);\n      uVar5 = bVar2 + 1 & 0xff;\n      *(char *)(param_1 + 0x49) = (char)uVar5;\n      param_3 = param_3 + 1;\n      *(char *)(uVar5 + param_1 + 9) = (char)*param_3;\n      *(byte *)(param_1 + 0x49) = bVar2 + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(param_1 + 0xe) = (char)uVar5;\n  uVar3 = 6;\nLAB_0008034a:\n  *(undefined *)(param_1 + 0x49) = uVar3;\nswitchD_0008031e_caseD_7:\n  update_data_00080258(param_1);\n  *(undefined *)(param_1 + 7) = 1;\n  cVar1 = '\\0';\nLAB_000803cc:\n  return (int)cVar1;\n}\n\n", 
        "called": [
            "FUN_00080258"
        ], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x000802da", 
        "calling": [
            "FUN_000805d0"
        ], 
        "current_name": "FUNC_000802da"
    }, 
    "FUN_00081210": {
        "renaming": {
            "iVar3": "result", 
            "FUN_00081210": "handle_parameter_00081210", 
            "puVar2": "param_type", 
            "param_1": "param_index", 
            "iVar9": "param_offset", 
            "iVar10": "param_data_offset", 
            "param_2": "option", 
            "puVar1": "param_data", 
            "uVar5": "u_var_5", 
            "uVar4": "u_var_4", 
            "uVar6": "u_var_6", 
            "bVar8": "param_type_and_data_value", 
            "bVar7": "param_type_value"
        }, 
        "code": "int handle_parameter_00081210(int param_index, int option)\\n{\\n  int result = param_index;\\n  byte *param_type = PTR_DAT_00081310;\\n  byte *param_data = PTR_DAT_0008130c;\\n  if (param_data[param_index * 0x1c + 0xc] != 0) {\\n    if ((param_type[param_index] & 0xf) == 4) {\\n      result = set_bit_in_integer(DAT_00081314, param_data[param_index * 0x1c + 0x19]);\\n    }\\n    byte param_type_value = param_type[param_index] & 0xf;\\n    if (param_type_value < 3 && param_type[param_index] != 0) {\\n      if (param_type_value == 2 && option == 0) {\\n        return result;\\n      }\\n      if (param_type_value == 1 && option == 2) {\\n        return result;\\n      }\\n      if (param_type_value == 3) {\\n        if (option == 1) {\\n          return result;\\n        }\\n        else {\\n          goto handle_param_1;\\n        }\\n      }\\n    }\\n    if (option != 1) {\\nhandle_param_1:\\n      if (option == 0) {\\n        int param_offset = param_index * 0x1c;\\n        set_bit_in_memory(*(undefined4 *)(param_data + param_offset + 8));\\n        result = handle_parameter_00081210(*(undefined4 *)(param_data + param_offset),3,*(undefined4 *)(param_data + param_offset + 4),0);\\n        param_type[param_index] = param_type[param_index] & 0xf0 | 2;\\n      }\\n      else {\\n        if (option != 2) {\\n          return result;\\n        }\\n        int param_offset = param_index * 0x1c;\\n        set_bit_in_memory(*(undefined4 *)(param_data + param_offset + 8));\\n        result = handle_parameter_00081210(*(undefined4 *)(param_data + param_offset),3,*(undefined4 *)(param_data + param_offset + 4),1);\\n        param_type[param_index] = param_type[param_index] & 0xf0 | 1;\\n      }\\n      return result;\\n    }\\n    int param_offset = param_index * 0x1c;\\n    int param_data_offset = *(int *)(param_data + param_offset);\\n    if (param_type[param_index] >> 4 == 0) {\\n      uVar5 = 4;", 
        "called": [
            "FUN_00080e18", 
            "FUN_0008105c", 
            "FUN_00080da0"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081210", 
        "calling": [
            "FUN_00080164", 
            "FUN_000804a8", 
            "FUN_00081318"
        ], 
        "imported": true, 
        "current_name": "handle_parameter_00081210"
    }, 
    "FUN_00080f9c": {
        "renaming": {
            "uVar1": "quotient", 
            "PTR_DAT_0008102c": "section_data_start_copy", 
            "FUN_00080f9c": "calculateValue_00080f9c", 
            "param_1": "output_array", 
            "param_2": "input_value", 
            "param_3": "input_divisor", 
            "param_4": "input_threshold", 
            "uVar2": "index", 
            "DAT_00081030": "section_data_end", 
            "local_58": "local_array"
        }, 
        "code": "uint32_t calculateValue_00080f9c(uint32_t *output_array, uint32_t input_value, int32_t input_divisor, int32_t input_threshold) {\\n  uint32_t local_array[16];\\n  for (int i = 0; i < 16; i++) {\\n    local_array[i] = *(uint32_t *)(PTR_DAT_0008102c + i * 4);\\n  }\\n  output_array[0] = 1;\\n  output_array[1] = 0;\\n  output_array[0x48] = 0x202;\\n  output_array[0x41] = 0;\\n  output_array[0x45] = 0;\\n  uint32_t quotient = input_value / (uint32_t)(input_divisor * 2);\\n  if (input_value == input_divisor * 2 * quotient) {\\n    quotient--;\\n  }\\n  uint32_t index = 0;\\n  do {\\n    if ((uint32_t)(input_threshold * (int32_t)(((uint64_t)input_value / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00081030)) <= local_array[index]) {\\n      output_array[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_array[1];\\n      return 0;\\n    }\\n    index++;\\n  } while (index != 0x10);\\n  return 0xffffffff;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080f9c", 
        "calling": [
            "FUN_00080ae4"
        ], 
        "imported": true, 
        "current_name": "calculateValue_00080f9c"
    }, 
    "FUN_00081454": {
        "renaming": {
            "iVar1": "data_struct_address", 
            "FUN_00081454": "writeToMemory_00081454", 
            "param_1": "memory_address", 
            "DAT_000814a4": "MASK_CONSTANT", 
            "param_2": "data", 
            "uVar2": "data_struct_field_3"
        }, 
        "code": "uint32_t writeToMemory_00081454(int32_t memory_address, uint32_t data) {\\n  int32_t data_struct_address = *(int32_t *)(memory_address + 0x14);\\n  int32_t data_struct_field_1 = *(int32_t *)(memory_address + 0x18);\\n  int32_t data_struct_field_2 = *(int32_t *)(data_struct_field_1 + 0x14);\\n  if ((*(int32_t *)(data_struct_field_2 + 0x84) == *(int32_t *)(data_struct_field_2 + 0x80)) && ((*(int32_t *)(data_struct_field_1 + 0x14) + 0x14) << 0x1e < 0)) {\\n    *(uint32_t *)(data_struct_field_1 + 0x1c) = data;\\n  }\\n  else {\\n    uint32_t data_struct_field_3 = 0x80000000 | (DAT_000814a4 & (*(int32_t *)(data_struct_field_2 + 0x80) + 1));\\n    if ((int32_t)data_struct_field_3 < 0) {\\n      data_struct_field_3 = (data_struct_field_3 - 1 | 0xffffff80) + 1;\\n    }\\n    while (*(uint32_t *)(data_struct_field_2 + 0x84) == data_struct_field_3);\\n    *(char *)(data_struct_field_2 + *(int32_t *)(data_struct_field_2 + 0x80)) = (char)data;\\n    *(uint32_t *)(*(int32_t *)(memory_address + 0x14) + 0x80) = data_struct_field_3;\\n    *(uint32_t *)(*(int32_t *)(memory_address + 0x18) + 8) = 2;\\n  }\\n  return 1;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081454", 
        "calling": [], 
        "imported": true, 
        "current_name": "writeToMemory_00081454"
    }, 
    "FUN_00081730": {
        "renaming": {
            "FUN_00081730": "FUNC_00081730"
        }, 
        "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n", 
        "called": [], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x00081730", 
        "calling": [
            "FUN_000805d0"
        ], 
        "current_name": "FUNC_00081730"
    }, 
    "FUN_00080ab8": {
        "renaming": {
            "FUN_00080ab8": "doNothing_00080ab8"
        }, 
        "code": "void doNothing_00080ab8(void)\\n{\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080ab8", 
        "calling": [
            "FUN_00080ce0"
        ], 
        "imported": true, 
        "current_name": "doNothing_00080ab8"
    }, 
    "FUN_00081734": {
        "renaming": {
            "FUN_00081734": "FUNC_00081734"
        }, 
        "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n", 
        "called": [], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x00081734", 
        "calling": [
            "FUN_000805d0"
        ], 
        "current_name": "FUNC_00081734"
    }, 
    "FUN_00084728": {
        "renaming": {
            "iVar2": "return_value", 
            "param_1": "output_value", 
            "FUN_00084728": "set_param_value_00084728", 
            "param_2": "param_2", 
            "param_3": "param_3", 
            "param_4": "param_4", 
            "puVar1": "param_data"
        }, 
        "code": "void set_param_value_00084728(int *output_value, undefined4 param_2, undefined4 param_3, undefined4 param_4)\\n{\\n  undefined *param_data = PTR_DAT_0008474c;\\n  *(undefined4 *)PTR_DAT_0008474c = 0;\\n  int return_value = return_zero(param_2, param_3, param_4);\\n  if (return_value == -1 && (*(int *)param_data != 0)) {\\n    *output_value = *(int *)param_data;\\n    return;\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_000811c6"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00084728", 
        "calling": [], 
        "imported": true, 
        "current_name": "set_param_value_00084728"
    }, 
    "FUN_00083c40": {
        "renaming": {
            "iVar2": "function_status", 
            "uVar1": "input_size", 
            "param_1": "parameter_1", 
            "abStack_1b": "input_buffer", 
            "local_1c": "local_input_buffer", 
            "pbVar4": "output_data", 
            "param_2": "parameter_2", 
            "param_3": "data_pointer", 
            "FUN_00083c40": "process_input_data_00083c40", 
            "uVar3": "input_value", 
            "uVar5": "function_result"
        }, 
        "code": "uint process_input_data_00083c40(uint32_t parameter_1, uint32_t parameter_2, byte **data_pointer)\\n{\\n  uint function_result;\\n  int function_status;\\n  uint input_value;\\n  uint input_size;\\n  byte *output_data;\\n  byte local_input_buffer;\\n  byte input_buffer[3];\\n  if (-1 < (int)((uint)*(ushort *)(data_pointer + 3) << 0x12)) {\\n    *(ushort *)(data_pointer + 3) = *(ushort *)(data_pointer + 3) | 0x2000;\\n    data_pointer[0x19] = (byte *)((uint)data_pointer[0x19] | 0x2000);\\n  }\\n  input_size = getDatValue_00084298();\\n  if ((input_size == 1) && (parameter_2 - 1 < 0xff)) {\\n    input_value = parameter_2 & 0xff;\\n    local_input_buffer = (byte)input_value;\\n  }\\n  else {\\n    function_result = execute_function_with_parameters_0008456c(parameter_1, &local_input_buffer, parameter_2, data_pointer + 0x17);\\n    if (function_result == 0xffffffff) {\\n      *(ushort *)(data_pointer + 3) = *(ushort *)(data_pointer + 3) | 0x40;\\n      return 0xffffffff;\\n    }\\n    if (function_result == 0) {\\n      return parameter_2;\\n    }\\n    input_value = (uint)local_input_buffer;\\n  }\\n  function_result = 0;\\n  do {\\n    output_data = data_pointer[2] + -1;\\n    data_pointer[2] = output_data;\\n    if ((int)output_data < 0) {\\n      if ((int)data_pointer[6] <= (int)output_data) {\\n        **data_pointer = (byte)input_value;\\n        output_data = *data_pointer;\\n        input_value = (uint)*output_data;\\n        if (input_value != 10) goto LAB_00083c90;\\n      }\\n      function_status = process_input(parameter_1, input_value, data_pointer);\\n      if (function_status == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n    else {\\n      **data_pointer = (byte)input_value;\\n      output_data = *data_pointer;\\nLAB_00083c90:\\n      *data_pointer = output_data + 1;\\n    }\\n    if (input_size <= function_result + 1) {\\n      return parameter_2;\\n    }\\n    input_value = (uint)input_buffer[function_result];\\n    function_result = function_result + 1;\\n  } while(true);\\n}", 
        "called": [
            "FUN_000844c4", 
            "FUN_00084298", 
            "FUN_0008456c"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00083c40", 
        "calling": [
            "FUN_00082ac0"
        ], 
        "imported": true, 
        "current_name": "process_input_data_00083c40"
    }, 
    "FUN_000805d0": {
        "renaming": {
            "FUN_000805d0": "FUNC_000805d0"
        }, 
        "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = getStoredValue_thunk_00081714();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = getStoredValue_thunk_00081714();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = getStoredValue_thunk_00081714();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = getStoredValue_thunk_00081714();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = getStoredValue_thunk_00081714();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = getStoredValue_thunk_00081714();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = getStoredValue_thunk_00081714();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = convertToQ31_32_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = decodeValue_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = convertToQ31_32_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = getStoredValue_thunk_00081714();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = convertToQ31_32_0008189c(*(undefined4 *)puVar2);\n  iVar15 = check_parameters_concatenation_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = concatenate_and_check_params_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = calculate_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n", 
        "called": [
            "FUN_00081894", 
            "FUN_000802da", 
            "FUN_0008189c", 
            "FUN_00081cd0", 
            "FUN_00081c94", 
            "FUN_00081730", 
            "FUN_00081734", 
            "FUN_00081ca8", 
            "FUN_0008043e", 
            "FUN_00081944", 
            "thunk_FUN_00081714", 
            "FUN_00081d1c"
        ], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x000805d0", 
        "calling": [
            "FUN_000816a8"
        ], 
        "current_name": "FUNC_000805d0"
    }, 
    "FUN_000813e4": {
        "renaming": {
            "param_1": "offsetPointer", 
            "FUN_000813e4": "getDifferenceFromOffsets_000813e4"
        }, 
        "code": "uint getDifferenceFromOffsets_000813e4(int param_1)\\n{\\n  int* offset1 = *(int *)(param_1 + 0x10) + 0x80;\\n  int* offset2 = *(int *)(param_1 + 0x10) + 0x84;\\n  int difference = *offset1 - *offset2;\\n  return difference & 0x7f;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000813e4", 
        "calling": [
            "FUN_00080ce0"
        ], 
        "imported": true, 
        "current_name": "getDifferenceFromOffsets_000813e4"
    }, 
    "FUN_0008120c": {
        "renaming": {
            "FUN_0008120c": "doNothing_0008120c"
        }, 
        "code": "void doNothing_0008120c()\\n{\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008120c", 
        "calling": [
            "FUN_000816a8"
        ], 
        "imported": true, 
        "current_name": "doNothing_0008120c"
    }, 
    "FUN_00084290": {
        "renaming": {
            "FUN_00084290": "getConstantValue_00084290"
        }, 
        "code": "undefined4 getConstantValue_00084290()\\n{\\n  return DAT_00084294;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00084290", 
        "calling": [
            "FUN_0008456c"
        ], 
        "imported": true, 
        "current_name": "getConstantValue_00084290"
    }, 
    "FUN_000846b4": {
        "renaming": {
            "iVar2": "return_value", 
            "param_1": "output_value", 
            "param_2": "param_2", 
            "param_3": "param_3", 
            "param_4": "param_4", 
            "puVar1": "param_data", 
            "FUN_000846b4": "set_flag_in_integer_000846b4"
        }, 
        "code": "void set_flag_in_integer_000846b4(int *output_value, undefined4 param_2, undefined4 param_3, undefined4 param_4)\\n{\\n  undefined *param_data = PTR_DAT_000846d8;\\n  *(undefined4 *)PTR_DAT_000846d8 = 0;\\n  int return_value = set_flag_in_integer_000846b4(param_2, param_3, param_3, 0, param_4);\\n  if (return_value == -1 && (*(int *)param_data != 0)) {\\n    *output_value = *(int *)param_data;\\n    return;\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_000811b4"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000846b4", 
        "calling": [
            "FUN_000842a4"
        ], 
        "imported": true, 
        "current_name": "set_flag_in_integer_000846b4"
    }, 
    "FUN_000813a8": {
        "renaming": {
            "FUN_000813a8": "initialize_buffer_000813a8", 
            "param_1": "buffer_address", 
            "fillMemoryWithByte_00082504": "fill_memory_with_byte"
        }, 
        "code": "int initialize_buffer_000813a8(int buffer_address)\\n{\\n  fill_memory_with_byte(buffer_address, 0, 0x80);\\n  *(undefined4 *)(buffer_address + 0x80) = 0;\\n  *(undefined4 *)(buffer_address + 0x84) = 0;\\n  return buffer_address;\\n}", 
        "called": [
            "FUN_00082504"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000813a8", 
        "calling": [
            "FUN_00080c0c"
        ], 
        "imported": true, 
        "current_name": "initialize_buffer_000813a8"
    }, 
    "FUN_00083d9c": {
        "renaming": {
            "FUN_00083d9c": "FUNC_00083d9c"
        }, 
        "code": "\nvoid FUNC_00083d9c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  int iVar6;\n  uint uVar7;\n  int iVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  doNothing_00082598();\n  iVar8 = DAT_00083f24;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar5 = param_2 + -8;\n  uVar4 = uVar2 & 0xfffffffe;\n  iVar3 = iVar5 + uVar4;\n  uVar7 = *(uint *)(iVar3 + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083f24 + 8) == iVar3) {\n    uVar7 = uVar7 + uVar4;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar5 = iVar5 - *(int *)(param_2 + -8);\n      iVar1 = *(int *)(iVar5 + 0xc);\n      iVar3 = *(int *)(iVar5 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar3 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar3;\n    }\n    uVar2 = *DAT_00083f2c;\n    *(uint *)(iVar5 + 4) = uVar7 | 1;\n    *(int *)(iVar8 + 8) = iVar5;\n    if (uVar2 <= uVar7) {\n      adjust_memory_allocation_size_00083d00(param_1,*(undefined4 *)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar3 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar5 = iVar5 - *(int *)(param_2 + -8);\n      iVar1 = *(int *)(iVar5 + 8);\n      uVar4 = uVar4 + *(int *)(param_2 + -8);\n      if (iVar1 == iVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar6 = *(int *)(iVar5 + 0xc);\n        *(int *)(iVar1 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar3 + uVar7 + 4) << 0x1f) {\n      uVar4 = uVar4 + uVar7;\n      iVar1 = *(int *)(iVar3 + 8);\n      if ((uVar2 == 0) && (iVar1 == DAT_00083f28)) {\n        *(int *)(iVar8 + 0x14) = iVar5;\n        *(int *)(iVar8 + 0x10) = iVar5;\n        *(int *)(iVar5 + 0xc) = iVar1;\n        *(int *)(iVar5 + 8) = iVar1;\n        *(uint *)(iVar5 + 4) = uVar4 | 1;\n        *(uint *)(iVar5 + uVar4) = uVar4;\n        goto LAB_00083e30;\n      }\n      iVar3 = *(int *)(iVar3 + 0xc);\n      *(int *)(iVar1 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar1;\n    }\n    *(uint *)(iVar5 + 4) = uVar4 | 1;\n    *(uint *)(iVar5 + uVar4) = uVar4;\n    if (uVar2 == 0) {\n      if (uVar4 < 0x200) {\n        uVar2 = *(uint *)(iVar8 + 4);\n        iVar1 = iVar8 + (uVar4 & 0xfffffff8);\n        iVar3 = *(int *)(iVar1 + 8);\n        *(int *)(iVar5 + 8) = iVar3;\n        *(int *)(iVar5 + 0xc) = iVar1;\n        *(uint *)(iVar8 + 4) = uVar2 | 1 << ((int)(uVar4 >> 3) >> 2 & 0xffU);\n        *(int *)(iVar1 + 8) = iVar5;\n        *(int *)(iVar3 + 0xc) = iVar5;\n        doNothing_0008259c(param_1);\n        return;\n      }\n      uVar2 = uVar4 >> 9;\n      if (uVar2 < 5) {\n        iVar3 = (uVar4 >> 6) + 0x38;\n        iVar1 = iVar3 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar3 = uVar2 + 0x5b;\n        iVar1 = iVar3 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar3 = (uVar4 >> 0xc) + 0x6e;\n        iVar1 = iVar3 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar3 = (uVar4 >> 0xf) + 0x77;\n        iVar1 = iVar3 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar3 = (uVar4 >> 0x12) + 0x7c;\n        iVar1 = iVar3 * 2;\n      }\n      else {\n        iVar1 = 0xfc;\n        iVar3 = 0x7e;\n      }\n      iVar8 = iVar8 + iVar1 * 4;\n      iVar1 = *(int *)(iVar8 + 8);\n      if (iVar1 == iVar8) {\n        *(uint *)(DAT_00083f24 + 4) = *(uint *)(DAT_00083f24 + 4) | 1 << (iVar3 >> 2 & 0xffU);\n        iVar8 = iVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(iVar1 + 4) & 0xfffffffc) <= uVar4) break;\n          iVar1 = *(int *)(iVar1 + 8);\n        } while (iVar8 != iVar1);\n        iVar8 = *(int *)(iVar1 + 0xc);\n      }\n      *(int *)(iVar5 + 0xc) = iVar8;\n      *(int *)(iVar5 + 8) = iVar1;\n      *(int *)(iVar8 + 8) = iVar5;\n      *(int *)(iVar1 + 0xc) = iVar5;\n    }\n  }\nLAB_00083e30:\n  doNothing_0008259c(param_1);\n  return;\n}\n\n", 
        "called": [
            "FUN_0008259c", 
            "FUN_00083d00", 
            "FUN_00082598"
        ], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x00083d9c", 
        "calling": [
            "FUN_00083808", 
            "FUN_00081e14", 
            "FUN_000846a4", 
            "FUN_00081e04", 
            "FUN_00083f34", 
            "FUN_00083adc", 
            "FUN_000825b0"
        ], 
        "current_name": "FUNC_00083d9c"
    }, 
    "FUN_00083c08": {
        "renaming": {
            "FUN_00083c08": "doNothing_00083c08"
        }, 
        "code": "void doNothing_00083c08()\\n{\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00083c08", 
        "calling": [
            "FUN_000846a4"
        ], 
        "imported": true, 
        "current_name": "doNothing_00083c08"
    }, 
    "FUN_00081bf4": {
        "renaming": {
            "bVar1": "isTemp4Negative", 
            "FUN_00081bf4": "calculateChecksum_00081bf4", 
            "param_1": "value1", 
            "param_2": "value2", 
            "uVar3": "temp2", 
            "uVar2": "temp1", 
            "uVar4": "temp3", 
            "bVar5": "isTemp3Zero"
        }, 
        "code": "uint calculateChecksum_00081bf4(uint value1, uint value2)\\n{\\n  uint temp1 = value1 * 2;\\n  uint temp2 = value2 * 2;\\n  if (((int)temp1 >> 0x18 == -1 || (int)temp2 >> 0x18 == -1) && ((((int)temp1 >> 0x18 == -1 && ((value1 & 0x7fffff) != 0)) || (((int)temp2 >> 0x18 == -1 && ((value2 & 0x7fffff) != 0)))))) {\\n    return 1;\\n  }\\n  uint temp3 = temp1 | value2 & 0x7fffffff;\\n  bool isTemp3Zero = temp3 == 0;\\n  if (!isTemp3Zero) {\\n    temp3 = value1 ^ value2;\\n    isTemp3Zero = temp3 == 0;\\n  }\\n  bool isTemp4Negative = -1 < (int)temp3;\\n  if (isTemp4Negative) {\\n    value1 = temp1 + value2 * -2;\\n    isTemp3Zero = value1 == 0;\\n  }\\n  if ((isTemp4Negative && temp2 <= temp1) && !isTemp3Zero) {\\n    value1 = (int)value2 >> 0x1f;\\n  }\\n  if (!isTemp4Negative || temp2 > temp1) {\\n    value1 = ~((int)value2 >> 0x1f);\\n  }\\n  if (!isTemp3Zero) {\\n    value1 = value1 | 1;\\n  }\\n  return value1;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081bf4", 
        "calling": [
            "FUN_00081c5c"
        ], 
        "imported": true, 
        "current_name": "calculateChecksum_00081bf4"
    }, 
    "FUN_00081d7c": {
        "renaming": {
            "ppcVar4": "function_pointers", 
            "iVar3": "i", 
            "FUN_00081d7c": "execute_functions_00081d7c", 
            "iVar5": "function_count", 
            "ppcVar7": "function_pointers_2", 
            "puVar2": "start_point", 
            "iVar6": "function_count_2", 
            "doNothing_00085858": "do_nothing", 
            "puVar1": "end_point"
        }, 
        "code": "void execute_functions_00081d7c(void)\\n{\\n  int function_count = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\\n  if (function_count != 0) {\\n    code **function_pointers = (code **)(PTR_DAT_00081dc0 + -4);\\n    int i = 0;\\n    do {\\n      i++;\\n      function_pointers++;\\n      (**function_pointers)();\\n    } while (function_count != i);\\n  }\\n  undefined *end_point = PTR_DAT_00081dc8;\\n  undefined *start_point = PTR_LAB_00081dc4;\\n  do_nothing();\\n  int function_count_2 = (int)start_point - (int)end_point >> 2;\\n  if (function_count_2 != 0) {\\n    code **function_pointers_2 = (code **)(end_point + -4);\\n    int i = 0;\\n    do {\\n      i++;\\n      function_pointers_2++;\\n      (**function_pointers_2)();\\n    } while (function_count_2 != i);\\n    return;\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_00083974", 
            "FUN_00080118", 
            "FUN_00085858"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081d7c", 
        "calling": [
            "FUN_00080ae4"
        ], 
        "imported": true, 
        "current_name": "execute_functions_00081d7c"
    }, 
    "FUN_00081c5c": {
        "renaming": {
            "FUN_00081c5c": "concatenate_params_to_64bit_word_00081c5c", 
            "param_1": "param_1", 
            "calculateChecksum_00081bf4": "calculate_checksum", 
            "param_2": "param_2"
        }, 
        "code": "undefined8 concatenate_params_to_64bit_word_00081c5c(undefined4 param_1, undefined4 param_2)\\n{\\n  calculate_checksum();\\n  return CONCAT44(param_2, param_1);\\n}", 
        "called": [
            "FUN_00081bf4"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081c5c", 
        "calling": [
            "FUN_00081c94", 
            "FUN_00081c54"
        ], 
        "imported": true, 
        "current_name": "concatenate_params_to_64bit_word_00081c5c"
    }, 
    "FUN_00081388": {
        "renaming": {
            "iVar1": "temp", 
            "FUN_00081388": "decrementAndCallIfZero_00081388", 
            "counter": "counterPointer"
        }, 
        "code": "void decrementAndCallIfZero_00081388()\\n{\\n  int* counter = DAT_000813a0;\\n  if ((*counter != -1) && (--(*counter) == 0)) {\\n    (*DAT_000813a4)();\\n  }\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081388", 
        "calling": [], 
        "imported": true, 
        "current_name": "decrementAndCallIfZero_00081388"
    }, 
    "FUN_00082598": {
        "renaming": {
            "FUN_00082598": "doNothing_00082598"
        }, 
        "code": "void doNothing_00082598()\\n{\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00082598", 
        "calling": [
            "FUN_00083d9c", 
            "FUN_00081e14", 
            "FUN_00083d00", 
            "FUN_000825b0"
        ], 
        "imported": true, 
        "current_name": "doNothing_00082598"
    }, 
    "FUN_00082994": {
        "renaming": {
            "puVar3": "nextSource", 
            "puVar4": "tempSource", 
            "FUN_00082994": "copyString_00082994", 
            "param_1": "destination", 
            "puVar7": "tempDest", 
            "param_2": "source", 
            "cVar1": "character", 
            "uVar2": "value", 
            "uVar5": "value", 
            "uVar6": "nextValue", 
            "bVar8": "isValueShort"
        }, 
        "code": "void copyString_00082994(uint* destination, uint* source)\\n{\\n  char character;\\n  ushort value;\\n  uint* tempSource;\\n  uint* tempDest;\\n  bool isValueShort;\\n  if ((((uint)source ^ (uint)destination) & 3) != 0) {\\n    do {\\n      character = *(char *)source;\\n      *(char *)destination = character;\\n      source = (uint *)((int)source + 1);\\n      destination = (uint *)((int)destination + 1);\\n    } while (character != '\\0');\\n    return;\\n  }\\n  if (((uint)source & 3) != 0) {\\n    tempSource = source;\\n    if (((uint)source & 1) != 0) {\\n      tempSource = (uint *)((int)source + 1);\\n      character = *(char *)source;\\n      *(char *)destination = character;\\n      destination = (uint *)((int)destination + 1);\\n      if (character == '\\0') {\\n        return;\\n      }\\n    }\\n    source = tempSource;\\n    if (((uint)tempSource & 2) != 0) {\\n      source = (uint *)((int)tempSource + 2);\\n      value = *(ushort *)tempSource;\\n      isValueShort = (value & 0xff) == 0;\\n      if (isValueShort) {\\n        *(char *)destination = (char)value;\\n      }\\n      else {\\n        *(ushort *)destination = value;\\n        isValueShort = (value & 0xff00) == 0;\\n        destination = (uint *)((int)destination + 2);\\n      }\\n      if (isValueShort) {\\n        return;\\n      }\\n    }\\n  }\\n  tempSource = source;\\n  uint value = *source;\\n  tempDest = destination;\\n  if (((uint)source & 4) != 0) {\\n    if ((value + 0xfefefeff & ~value & 0x80808080) != 0) goto LAB_000829f8;\\n    tempDest = destination + 1;\\n    *destination = value;\\n    tempSource = source + 2;\\n    value = source[1];\\n  }\\n  while( true ) {\\n    uint* nextSource = tempSource + 1;\\n    uint nextValue = *tempSource;\\n    destination = tempDest;\\n    if ((value + 0xfefefeff & ~value & 0x80808080) != 0) break;\\n    destination = tempDest + 1;\\n    *tempDest = value;\\n    value = nextValue;\\n    if ((nextValue + 0xfefefeff & ~nextValue & 0x80808080) != 0) break;\\n    tempSource = tempSource + 2;\\n    value = *nextSource;\\n    tempDest = tempDest + 2;\\n    *destination = nextValue;\\n  }\\n  do {\\n    *(char *)destination = (char)value;\\n    uint characterValue = value & 0xff;\\n    value = value >> 8 | value << 0x18;\\n    destination = (uint *)((int)destination + 1);\\n  } while (characterValue != 0);\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00082994", 
        "calling": [
            "FUN_0008165c"
        ], 
        "imported": true, 
        "current_name": "copyString_00082994"
    }, 
    "FUN_00080c0c": {
        "renaming": {
            "initialize_memory_write_params_000815d4": "initialize_memory_write_params", 
            "puVar2": "buffer2", 
            "puVar3": "buffer3", 
            "puVar4": "buffer4", 
            "param_1": "param_1", 
            "puVar5": "buffer5", 
            "puVar6": "buffer6", 
            "puVar7": "buffer7", 
            "FUN_00080c0c": "initialize_memory_write_params_00080c0c", 
            "puVar8": "buffer8", 
            "initializeMemoryWriteParams_000814e4": "initialize_memory_write_params", 
            "param_2": "param_2", 
            "param_3": "param_3", 
            "puVar1": "buffer1", 
            "initialize_buffer_000813a8": "initialize_buffer"
        }, 
        "code": "void initialize_memory_write_params_00080c0c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\\n{\\n  uint8_t* buffer1 = PTR_DAT_00080ca0;\\n  uint8_t* buffer2 = PTR_DAT_00080ca4;\\n  uint8_t* buffer3 = PTR_DAT_00080cac;\\n  uint8_t* buffer4 = PTR_DAT_00080cb0;\\n  uint8_t* buffer5 = PTR_DAT_00080cb4;\\n  uint8_t* buffer6 = PTR_DAT_00080cb8;\\n  uint8_t* buffer7 = PTR_DAT_00080cbc;\\n  uint8_t* buffer8 = PTR_DAT_00080cdc;\\n  initialize_buffer(buffer1);\\n  initialize_buffer(buffer2);\\n  initialize_buffer(buffer3);\\n  initialize_buffer(buffer4);\\n  initialize_buffer(buffer5);\\n  initialize_buffer(buffer6);\\n  initialize_buffer(buffer7);\\n  initialize_buffer(buffer8);\\n  initialize_memory_write_params_00080c0c(PTR_DAT_00080cc4, DAT_00080cc0, 0x11, 0x11, buffer2, buffer8);\\n  initialize_memory_write_params_00080c0c(PTR_DAT_00080ccc, DAT_00080cc8, 0x12, 0x12, buffer3, buffer6);\\n  initialize_memory_write_params_00080c0c(PTR_DAT_00080cd4, DAT_00080cd0, 0x14, 0x14, buffer5, buffer7);\\n  return;\\n}", 
        "called": [
            "FUN_000815d4", 
            "FUN_000813a8", 
            "FUN_000814e4"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080c0c", 
        "calling": [], 
        "imported": true, 
        "current_name": "initialize_memory_write_params_00080c0c"
    }, 
    "FUN_00080d2e": {
        "renaming": {
            "uVar1": "result", 
            "param_1": "memoryAddress", 
            "FUN_00080d2e": "updateValue_00080d2e", 
            "param_2": "bitmask", 
            "param_3": "value"
        }, 
        "code": "void updateValue_00080d2e(int memoryAddress, uint bitmask, uint value)\\n{\\n  uint result;\\n  *(uint *)(memoryAddress + 0x44) = value;\\n  switch(bitmask) {\\n    case 0:\\n    case 3:\\n    case 4:\\n    case 5:\\n      return;\\n    case 1:\\n      result = *(uint *)(memoryAddress + 0x70) & *(uint *)(memoryAddress + 0x70) & ~value;\\n      break;\\n    case 2:\\n      result = *(uint *)(memoryAddress + 0x70) | value;\\n      break;\\n    default:\\n      goto switchD_00080d34_caseD_6;\\n  }\\n  *(uint *)(memoryAddress + 0x70) = result;\\n  switchD_00080d34_caseD_6:\\n  *(uint *)(memoryAddress + 4) = value;\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080d2e", 
        "calling": [
            "FUN_00080da0"
        ], 
        "imported": true, 
        "current_name": "updateValue_00080d2e"
    }, 
    "FUN_00081944": {
        "renaming": {
            "FUN_00081944": "FUNC_00081944"
        }, 
        "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n", 
        "called": [], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x00081944", 
        "calling": [
            "FUN_000805d0"
        ], 
        "current_name": "FUNC_00081944"
    }, 
    "FUN_000844c4": {
        "renaming": {
            "uVar1": "parameter_value", 
            "iVar4": "data_offset", 
            "puVar3": "data_pointer", 
            "param_1": "data_address", 
            "param_2": "input_value", 
            "param_3": "status", 
            "param_4": "data_value", 
            "FUN_000844c4": "process_input_000844c4", 
            "uVar2": "parameter"
        }, 
        "code": "uint process_input_000844c4(int data_address, uint input_value, uint32_t *status, uint32_t data_value)\\n{\\n  ushort parameter_value;\\n  uint parameter;\\n  undefined *data_pointer;\\n  int data_offset;\\n  if ((data_address != 0) && (*(int *)(data_address + 0x38) == 0)) {\\n    execute_skipped_function_00083b14();\\n  }\\n  parameter_value = *(ushort *)(status + 3);\\n  parameter = (uint)parameter_value;\\n  status[2] = status[6];\\n  if ((-1 < (int)(parameter << 0x1c)) || (data_offset = status[4], data_offset == 0)) {\\n    data_offset = check_parameter_and_update_data(data_address, status, parameter_value, parameter, data_value);\\n    if (data_offset != 0) {\\n      return 0xffffffff;\\n    }\\n    parameter_value = *(ushort *)(status + 3);\\n    data_offset = status[4];\\n    parameter = (uint)parameter_value;\\n  }\\n  input_value = input_value & 0xff;\\n  if ((int)(parameter << 0x12) < 0) {\\n    data_pointer = (undefined *)*status;\\n    data_offset = (int)data_pointer - data_offset;\\n    if (data_offset < (int)status[5]) {\\n      LAB_000844f6:\\n      data_offset = data_offset + 1;\\n      goto LAB_000844f8;\\n    }\\n  }\\n  else {\\n    status[0x19] = status[0x19] & 0xffffdfff;\\n    data_pointer = (undefined *)*status;\\n    *(ushort *)(status + 3) = parameter_value | 0x2000;\\n    data_offset = (int)data_pointer - data_offset;\\n    if (data_offset < (int)status[5]) goto LAB_000844f6;\\n  }\\n  data_offset = execute_skipped_function_00083adc(data_address, status);\\n  if (data_offset != 0) {\\n    return 0xffffffff;\\n  }\\n  data_pointer = (undefined *)*status;\\n  data_offset = 1;\\n  LAB_000844f8:\\n  status[2] = status[2] + -1;\\n  *status = data_pointer + 1;\\n  *data_pointer = (char)input_value;\\n  if (((status[5] == data_offset) || (((int)((uint)*(ushort *)(status + 3) << 0x1f) < 0 && (input_value == 10)))) && (data_offset = execute_skipped_function_00083adc(data_address, status), data_offset != 0)) {\\n    return 0xffffffff;\\n  }\\n  return input_value;\\n}", 
        "called": [
            "FUN_00083808", 
            "FUN_00083b14", 
            "FUN_00083adc"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000844c4", 
        "calling": [
            "FUN_00083c40"
        ], 
        "imported": true, 
        "current_name": "process_input_000844c4"
    }, 
    "FUN_0008189c": {
        "renaming": {
            "iVar1": "leadingZeroes", 
            "iVar4": "exponent", 
            "param_1": "input", 
            "result": "result", 
            "absInput": "absInput", 
            "uVar3": "signBit", 
            "FUN_0008189c": "convertToQ31_32_0008189c", 
            "uVar2": "shiftAmount", 
            "uVar5": "fraction"
        }, 
        "code": "uint convertToQ31_32_0008189c(uint input)\\n{\\n  int leadingZeroes = count_leading_zeroes(input);\\n  uint signBit = input & 0x80000000;\\n  uint absInput = input;\\n  if ((int)signBit < 0) {\\n    absInput = -input;\\n  }\\n  if (absInput == 0) {\\n    return 0;\\n  }\\n  uint shiftAmount = leadingZeroes - 8;\\n  int exponent = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\\n  if (leadingZeroes > 7) {\\n    uint fraction = 0 << (shiftAmount & 0xff);\\n    uint result = exponent + (absInput << (shiftAmount & 0xff)) + (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < fraction);\\n    if (fraction == 0x80000000) {\\n      result = result & 0xfffffffe;\\n    }\\n    return result;\\n  }\\n  uint fraction = absInput << (leadingZeroes + 0x18U & 0xff);\\n  uint result = exponent + ((absInput >> (0x20 - (leadingZeroes + 0x18U) & 0xff)) - ((int)fraction >> 0x1f));\\n  if ((fraction & 0x7fffffff) == 0) {\\n    result = result & ~(fraction >> 0x1f);\\n  }\\n  return result;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008189c", 
        "calling": [
            "FUN_000805d0"
        ], 
        "imported": true, 
        "current_name": "convertToQ31_32_0008189c"
    }, 
    "FUN_0008234c": {
        "renaming": {
            "FUN_0008234c": "FUNC_0008234c"
        }, 
        "code": "\nundefined4 * FUNC_0008234c(undefined4 *param_1,undefined4 *param_2,uint param_3)\n\n{\n  undefined4 *puVar1;\n  undefined4 *puVar2;\n  undefined4 *puVar3;\n  uint uVar4;\n  uint uVar5;\n  bool bVar6;\n  \n  puVar2 = param_1;\n  if ((((uint)param_2 | (uint)param_1) & 3) != 0) {\n    if (param_3 < 8) {\n      uVar5 = param_3 - 4;\n      if (3 < param_3) {\n        do {\n          puVar1 = param_2;\n          puVar3 = puVar2;\n          bVar6 = uVar5 != 0;\n          uVar5 = uVar5 - 1;\n          *(undefined *)puVar3 = *(undefined *)puVar1;\n          puVar2 = (undefined4 *)((int)puVar3 + 1);\n          param_2 = (undefined4 *)((int)puVar1 + 1);\n        } while (bVar6);\n        *(undefined *)(undefined4 *)((int)puVar3 + 1) =\n             *(undefined *)(undefined4 *)((int)puVar1 + 1);\n        *(undefined *)((int)puVar3 + 2) = *(undefined *)((int)puVar1 + 2);\n        *(undefined *)((int)puVar3 + 3) = *(undefined *)((int)puVar1 + 3);\n        return param_1;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)param_2 & 3) != 0) && (((uint)param_1 & 3) != 0)) {\n      uVar5 = 4 - ((uint)param_1 & 3);\n      param_3 = param_3 - uVar5;\n      puVar1 = param_1;\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) != 0) {\n        puVar3 = (undefined4 *)((int)param_2 + 1);\n        puVar1 = (undefined4 *)((int)param_1 + 1);\n        *(undefined *)param_1 = *(undefined *)param_2;\n      }\n      puVar2 = puVar1;\n      param_2 = puVar3;\n      if ((uVar5 & 2) != 0) {\n        param_2 = (undefined4 *)((int)puVar3 + 2);\n        puVar2 = (undefined4 *)((int)puVar1 + 2);\n        *(undefined2 *)puVar1 = *(undefined2 *)puVar3;\n      }\n    }\n  }\n  while (0x3f < param_3) {\n    *puVar2 = *param_2;\n    puVar2[1] = param_2[1];\n    puVar2[2] = param_2[2];\n    puVar2[3] = param_2[3];\n    puVar2[4] = param_2[4];\n    puVar2[5] = param_2[5];\n    puVar2[6] = param_2[6];\n    puVar2[7] = param_2[7];\n    puVar2[8] = param_2[8];\n    puVar2[9] = param_2[9];\n    puVar2[10] = param_2[10];\n    puVar2[0xb] = param_2[0xb];\n    puVar2[0xc] = param_2[0xc];\n    puVar2[0xd] = param_2[0xd];\n    puVar2[0xe] = param_2[0xe];\n    puVar2[0xf] = param_2[0xf];\n    puVar2 = puVar2 + 0x10;\n    param_2 = param_2 + 0x10;\n    param_3 = param_3 - 0x40;\n  }\n  uVar4 = param_3 - 0x10;\n  if (0xffffffcf < param_3 - 0x40) {\n    do {\n      *puVar2 = *param_2;\n      puVar2[1] = param_2[1];\n      puVar2[2] = param_2[2];\n      puVar2[3] = param_2[3];\n      puVar2 = puVar2 + 4;\n      param_2 = param_2 + 4;\n      bVar6 = 0xf < uVar4;\n      uVar4 = uVar4 - 0x10;\n    } while (bVar6);\n  }\n  uVar5 = uVar4 + 0xc;\n  puVar3 = puVar2;\n  puVar1 = param_2;\n  if (0xfffffff3 < uVar4) {\n    do {\n      param_2 = puVar1 + 1;\n      *puVar3 = *puVar1;\n      bVar6 = 3 < uVar5;\n      uVar5 = uVar5 - 4;\n      puVar2 = puVar3 + 1;\n      puVar3 = puVar3 + 1;\n      puVar1 = param_2;\n    } while (bVar6);\n  }\nLAB_000823d0:\n  if (uVar5 + 4 != 0) {\n    puVar1 = puVar2;\n    puVar3 = param_2;\n    if ((uVar5 & 1) != 0) {\n      puVar3 = (undefined4 *)((int)param_2 + 1);\n      puVar1 = (undefined4 *)((int)puVar2 + 1);\n      *(undefined *)puVar2 = *(undefined *)param_2;\n    }\n    if ((uVar5 + 4 & 2) != 0) {\n      *(undefined2 *)puVar1 = *(undefined2 *)puVar3;\n    }\n  }\n  return param_1;\n}\n\n", 
        "called": [], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x0008234c", 
        "calling": [
            "FUN_00083f34"
        ], 
        "current_name": "FUNC_0008234c"
    }, 
    "FUN_00080a68": {
        "renaming": {
            "process_input_string_00081682": "process_input_string", 
            "DAT_00080aa0": "param_value", 
            "PTR_s__00080a98": "input_string_size", 
            "DAT_00080a9c": "param_size", 
            "PTR_DAT_00080aa4": "result_buffer", 
            "puVar1": "data_buffer", 
            "FUN_00080a68": "process_data_and_add_to_buffer_00080a68", 
            "PTR_DAT_00080a94": "data_buffer", 
            "addParamToBuffer_00081d5c": "add_param_to_buffer"
        }, 
        "code": "void process_data_and_add_to_buffer_00080a68(void)\\n{\\n  undefined *PTR_DAT_00080a94 = PTR_DAT_00080a94;\\n  process_input_string(PTR_DAT_00080a94, PTR_s__00080a98);\\n  add_param_to_buffer(PTR_DAT_00080a94, DAT_00080aa0, DAT_00080a9c);\\n  undefined *PTR_DAT_00080aa4 = PTR_DAT_00080aa4;\\n  PTR_DAT_00080aa4[4] = 0;\\n  PTR_DAT_00080aa4[5] = 0;\\n  PTR_DAT_00080aa4[6] = 6;\\n  *(undefined2 *)(PTR_DAT_00080aa4 + 0x56) = 1000;\\n  return;\\n}", 
        "called": [
            "FUN_00081682", 
            "FUN_00081d5c"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080a68", 
        "calling": [], 
        "imported": true, 
        "current_name": "process_data_and_add_to_buffer_00080a68"
    }, 
    "FUN_0008165c": {
        "renaming": {
            "iVar1": "function_status", 
            "param_1": "data", 
            "param_2": "string", 
            "param_3": "size", 
            "FUN_0008165c": "process_data_0008165c"
        }, 
        "code": "undefined4 process_data_0008165c(undefined4 *data, undefined4 string, undefined4 size)\\n{\\n  int function_status;\\n  function_status = check_and_execute_function(data, size);\\n  if (function_status == 0) {\\n    reset_data(data);\\n  }\\n  else {\\n    data[2] = size;\\n    copy_string(*data, string);\\n  }\\n  return data;\\n}", 
        "called": [
            "FUN_0008160c", 
            "FUN_00082994", 
            "FUN_0008163a"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008165c", 
        "calling": [
            "FUN_00081682"
        ], 
        "imported": true, 
        "current_name": "process_data_0008165c"
    }, 
    "FUN_000815f8": {
        "renaming": {
            "param_1": "byte1", 
            "param_2": "byte2", 
            "FUN_000815f8": "combineBytes_000815f8"
        }, 
        "code": "uint combineBytes_000815f8(int byte1, uint byte2)\\n{\\n  return byte2 | byte1 << 8;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000815f8", 
        "calling": [
            "FUN_00080410"
        ], 
        "imported": true, 
        "current_name": "combineBytes_000815f8"
    }, 
    "FUN_00084384": {
        "renaming": {
            "FUN_00084384": "findCharInBuffer_00084384", 
            "pcVar3": "currentChar", 
            "param_1": "bufferStart", 
            "param_2": "targetChar", 
            "param_3": "bufferEnd", 
            "puVar1": "currentPtr", 
            "uVar2": "temp", 
            "pcVar4": "lastChar", 
            "bVar5": "isLastChar"
        }, 
        "code": "uint* findCharInBuffer_00084384(uint* bufferStart, char targetChar, uint* bufferEnd)\\n{\\n  uint* currentPtr = bufferStart;\\n  if (((uint)bufferStart & 3) == 0) {\\n    while (bufferEnd > (uint*)0x3) {\\n      uint temp = *currentPtr ^ CONCAT22(CONCAT11(targetChar,targetChar),CONCAT11(targetChar,targetChar));\\n      if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) {\\n        break;\\n      }\\n      bufferEnd--;\\n      currentPtr++;\\n    }\\n    bufferStart = bufferEnd;\\n    char* lastChar = (char*)((int)bufferStart - 1);\\n    if (bufferStart != (uint*)0x0 && *currentPtr != targetChar) {\\n      char* currentChar = (char*)0x0;\\n      while (true) {\\n        currentPtr = (uint*)((int)currentPtr + 1);\\n        currentChar++;\\n        if (currentChar == lastChar) {\\n          return (uint*)0x0;\\n        }\\n        if (*(char*)currentPtr == targetChar) {\\n          break;\\n        }\\n      }\\n    }\\n  }\\n  else if (bufferEnd == (uint*)0x0) {\\n    bufferStart = (uint*)0x0;\\n  }\\n  else if (*bufferStart != targetChar) {\\n    currentPtr = (uint*)((int)bufferStart + 1);\\n    bufferEnd = (uint*)((int)bufferEnd - 1);\\n    while (true) {\\n      bufferStart = currentPtr;\\n      if (((uint)bufferStart & 3) == 0) {\\n        break;\\n      }\\n      if (bufferEnd == (uint*)0x0) {\\n        return (uint*)0x0;\\n      }\\n      currentPtr = (uint*)((int)currentPtr + 1);\\n      bufferEnd--;\\n      if (*(char*)bufferStart == targetChar) {\\n        return bufferStart;\\n      }\\n    }\\n    while (bufferEnd > (uint*)0x3) {\\n      uint temp = *currentPtr ^ CONCAT22(CONCAT11(targetChar,targetChar),CONCAT11(targetChar,targetChar));\\n      if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) {\\n        break;\\n      }\\n      bufferEnd--;\\n      currentPtr++;\\n    }\\n    bufferStart = bufferEnd;\\n    char* lastChar = (char*)((int)bufferStart - 1);\\n    if (bufferStart != (uint*)0x0 && *currentPtr != targetChar) {\\n      char* currentChar = (char*)0x0;\\n      while (true) {\\n        currentPtr = (uint*)((int)currentPtr + 1);\\n        currentChar++;\\n        if (currentChar == lastChar) {\\n          return (uint*)0x0;\\n        }\\n        if (*(char*)currentPtr == targetChar) {\\n          break;\\n        }\\n      }\\n    }\\n  }\\n  return bufferStart;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00084384", 
        "calling": [
            "FUN_00083f34", 
            "FUN_00082b38"
        ], 
        "imported": true, 
        "current_name": "findCharInBuffer_00084384"
    }, 
    "FUN_00081034": {
        "renaming": {
            "uint *": "uint*", 
            "FUN_00081034": "setBitInParam_00081034", 
            "param_1": "paramAddress", 
            "uint": "uint", 
            "uint *paramPtr": "uint* paramPtr", 
            "param_2": "bitValue", 
            "*(uint *)(param_1 + 4)": "*paramPtr", 
            "param_3": "bitPosition", 
            "uint currentValue": "uint currentValue", 
            "uint updatedValue": "uint updatedValue", 
            "param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7": "updatedValue"
        }, 
        "code": "void setBitInParam_00081034(int paramAddress, uint bitValue, uint bitPosition)\\n{\\n  uint* paramPtr = (uint*)(paramAddress + 4);\\n  uint currentValue = *paramPtr;\\n  uint updatedValue = currentValue | bitValue | (bitPosition & 1) << 7;\\n  *paramPtr = updatedValue;\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081034", 
        "calling": [
            "FUN_00080ae4"
        ], 
        "imported": true, 
        "current_name": "setBitInParam_00081034"
    }, 
    "FUN_00083c0c": {
        "renaming": {
            "FUN_00083c0c": "doNothing_00083c0c"
        }, 
        "code": "void doNothing_00083c0c()\\n{\\n  // This function does nothing.\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00083c0c", 
        "calling": [
            "FUN_000846a4"
        ], 
        "imported": true, 
        "current_name": "doNothing_00083c0c"
    }, 
    "FUN_00083974": {
        "renaming": {
            "iVar3": "current_index", 
            "iVar4": "data_array", 
            "puVar2": "list", 
            "FUN_00083974": "add_data_to_list_00083974", 
            "param_1": "data", 
            "puVar1": "data_pointer"
        }, 
        "code": "undefined4 add_data_to_list_00083974(undefined4 data)\\n{\\n  undefined *data_pointer = PTR_DAT_00083984;\\n  if (DAT_00083980 == 0) {\\n    return data;\\n  }\\n  int data_array = *(int *)PTR_DAT_0008396c;\\n  undefined4 *list = *(undefined4 **)(data_array + 0x148);\\n  if (list == (undefined4 *)0x0) {\\n    list = (undefined4 *)(data_array + 0x14c);\\n    *(undefined4 **)(data_array + 0x148) = list;\\n  }\\n  int current_index = list[1];\\n  if (current_index > 0x1f) {\\n    if ((DAT_00083970 == 0) || (execute_skipped_function_with_data_00081df4(400) == (undefined4 *)0x0)) {\\n      return 0xffffffff;\\n    }\\n    *list = *(undefined4 *)(data_array + 0x148);\\n    list[1] = 0;\\n    current_index = 0;\\n    *(undefined4 **)(data_array + 0x148) = list;\\n    list[0x62] = 0;\\n    list[99] = 0;\\n  }\\n  list[1] = current_index + 1;\\n  list[current_index + 2] = data_pointer;\\n  return 0;\\n}", 
        "called": [
            "FUN_00081df4"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00083974", 
        "calling": [
            "FUN_00081d7c"
        ], 
        "imported": true, 
        "current_name": "add_data_to_list_00083974"
    }, 
    "FUN_00084700": {
        "renaming": {
            "iVar2": "return_value", 
            "FUN_00084700": "set_param_to_zero_if_return_is_negative_00084700", 
            "param_1": "output_value", 
            "param_2": "param_2", 
            "param_3": "param_3", 
            "param_4": "param_4", 
            "puVar1": "param_data"
        }, 
        "code": "void set_param_to_zero_if_return_is_negative_00084700(int *output_value, undefined4 param_2, undefined4 param_3, undefined4 param_4)\\n{\\n  undefined *param_data = PTR_DAT_00084724;\\n  *(undefined4 *)PTR_DAT_00084724 = 0;\\n  int return_value = return_zero(param_2, param_3, param_4);\\n  if (return_value == -1 && (*(int *)param_data != 0)) {\\n    *output_value = *(int *)param_data;\\n    return;\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_000811c2"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00084700", 
        "calling": [
            "FUN_0008449c", 
            "FUN_00084464"
        ], 
        "imported": true, 
        "current_name": "set_param_to_zero_if_return_is_negative_00084700"
    }, 
    "thunk_FUN_00081714": {
        "renaming": {
            "undefined4": "undefined4", 
            "thunk_FUN_00081714": "getStoredValue_thunk_00081714", 
            "*(undefined4 *)PTR_DAT_0008171c": "*(undefined4*)PTR_DAT_0008171c"
        }, 
        "code": "undefined4 getStoredValue_thunk_00081714()\\n{\\n  return *(undefined4 *)PTR_DAT_0008171c;\\n}", 
        "called": [
            "FUN_00081714"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081208", 
        "calling": [
            "FUN_00080258", 
            "FUN_000805d0", 
            "FUN_0008043e", 
            "FUN_000804a8"
        ], 
        "imported": true, 
        "current_name": "getStoredValue_thunk_00081714"
    }, 
    "FUN_00081ca8": {
        "renaming": {
            "in_ZR": "zero_flag", 
            "in_CY": "carry_flag", 
            "FUN_00081ca8": "check_parameters_concatenation_00081ca8"
        }, 
        "code": "bool check_parameters_concatenation_00081ca8(void)\\n{\\n  bool carry_flag = false;\\n  bool zero_flag = false;\\n  concatenate_parameters_to_64bit_word_00081c54();\\n  if (carry_flag || !zero_flag) {\\n    return true;\\n  }\\n  else {\\n    return false;\\n  }\\n}", 
        "called": [
            "FUN_00081c54"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081ca8", 
        "calling": [
            "FUN_000805d0"
        ], 
        "imported": true, 
        "current_name": "check_parameters_concatenation_00081ca8"
    }, 
    "FUN_00081318": {
        "renaming": {
            "checkFlags_00080e04": "check_flags", 
            "handle_parameter_00081210": "handle_parameter", 
            "puVar2": "parameter_flags", 
            "param_1": "parameter_index", 
            "FUN_00081318": "update_parameter_00081318", 
            "param_2": "value", 
            "param_3": "param_3", 
            "puVar1": "parameter_data", 
            "setValuesInArray_00080d7a": "set_values_in_array"
        }, 
        "code": "void update_parameter_00081318(int parameter_index, int value, undefined4 param_3)\\n{\\n  uint8_t* parameter_flags = PTR_DAT_00081384;\\n  uint8_t* parameter_data = PTR_DAT_00081380;\\n  if (parameter_data[parameter_index * 0x1c + 0xc] != '\\0') {\\n    if ((parameter_flags[parameter_index] & 0xf) == 5) {\\n      handle_parameter(parameter_index, 1, param_3, 5, parameter_index, value, param_3);\\n    }\\n    parameter_flags[parameter_index] = parameter_flags[parameter_index] & 0xf | (byte)(value << 4);\\n    int parameter_data_index = *(int *)(parameter_data + parameter_index * 0x1c);\\n    undefined4 parameter_data_value = *(undefined4 *)(parameter_data + parameter_index * 0x1c + 4);\\n    int flags_check = checkFlags_00080e04(parameter_data_index, parameter_data_value);\\n    if (flags_check == 0) {\\n      if (value != 0) {\\n        *(undefined4 *)(parameter_data_index + 100) = parameter_data_value;\\n        return;\\n      }\\n      *(undefined4 *)(parameter_data_index + 0x60) = parameter_data_value;\\n      return;\\n    }\\n    set_values_in_array(parameter_data_index, parameter_data_value, value, 0, 1);\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_00080e04", 
            "FUN_00081210", 
            "FUN_00080d7a"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081318", 
        "calling": [
            "FUN_00080164", 
            "FUN_00080258", 
            "FUN_000801b0", 
            "FUN_00080ae4", 
            "FUN_000804a8"
        ], 
        "imported": true, 
        "current_name": "update_parameter_00081318"
    }, 
    "FUN_00081714": {
        "renaming": {
            "undefined4": "undefined4", 
            "FUN_00081714": "getStoredValue_00081714", 
            "*(undefined4 *)PTR_DAT_0008171c": "*(undefined4*)PTR_DAT_0008171c"
        }, 
        "code": "undefined4 getStoredValue_00081714()\\n{\\n  return *(undefined4 *)PTR_DAT_0008171c;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081714", 
        "calling": [
            "thunk_FUN_00081714"
        ], 
        "imported": true, 
        "current_name": "getStoredValue_00081714"
    }, 
    "FUN_0008449c": {
        "renaming": {
            "iVar1": "result", 
            "param_1": "param_1", 
            "set_param_to_zero_if_return_is_negative_00084700": "set_param_to_zero_if_return_is_negative", 
            "FUN_0008449c": "update_parameter_value_0008449c", 
            "param_2": "parameter_data_index", 
            "uVar2": "parameter_flags"
        }, 
        "code": "void update_parameter_value_0008449c(undefined4 param_1, int parameter_data_index)\\n{\\n  int parameter_value = *(short *)(parameter_data_index + 0xe);\\n  int result = set_param_to_zero_if_return_is_negative(param_1, parameter_value);\\n  ushort parameter_flags = *(ushort *)(parameter_data_index + 0xc);\\n  if (result == -1) {\\n    parameter_flags &= 0xefff;\\n  }\\n  else {\\n    parameter_flags |= 0x1000;\\n  }\\n  if (result != -1) {\\n    *(int *)(parameter_data_index + 0x50) = result;\\n  }\\n  *(ushort *)(parameter_data_index + 0xc) = parameter_flags;\\n  return;\\n}", 
        "called": [
            "FUN_00084700"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008449c", 
        "calling": [], 
        "imported": true, 
        "current_name": "update_parameter_value_0008449c"
    }, 
    "FUN_0008259c": {
        "renaming": {
            "FUN_0008259c": "doNothing_0008259c"
        }, 
        "code": "void doNothing_0008259c()\\n{\\n  // This function does nothing.\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008259c", 
        "calling": [
            "FUN_00083d9c", 
            "FUN_00081e14", 
            "FUN_00083d00", 
            "FUN_000825b0"
        ], 
        "imported": true, 
        "current_name": "doNothing_0008259c"
    }, 
    "FUN_0008477c": {
        "renaming": {
            "FUNC_000847e0": "multiply_64bit_numbers", 
            "uVar1": "product_low", 
            "param_1": "dividend", 
            "lVar2": "product", 
            "param_2": "divisor", 
            "param_3": "multiplier_low", 
            "FUN_0008477c": "calculate_difference_and_remainder_0008477c", 
            "param_4": "multiplier_high", 
            "param_5": "output_values"
        }, 
        "code": "void calculate_difference_and_remainder_0008477c(uint dividend, int divisor, uint multiplier_low, uint multiplier_high, int *output_values)\\n{\\n  longlong product = multiply_64bit_numbers(multiplier_low, multiplier_high);\\n  uint product_low = (uint)product;\\n  uint product_high = (uint)(product >> 0x20);\\n  output_values[0] = dividend - product_low;\\n  output_values[1] = (divisor - (int)(product_high)) - (uint)(dividend < product_low);\\n  return;\\n}", 
        "called": [
            "FUN_000847e0"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008477c", 
        "calling": [], 
        "imported": true, 
        "current_name": "calculate_difference_and_remainder_0008477c"
    }, 
    "FUN_000801b0": {
        "renaming": {
            "bVar1": "is_overflow", 
            "iVar4": "function_result", 
            "param_1": "parameter_array", 
            "cVar3": "return_value", 
            "FUN_000801b0": "process_parameter_000801b0", 
            "uVar2": "byte_value", 
            "bVar5": "current_byte_index"
        }, 
        "code": "int process_parameter_000801b0(int **parameter_array)\\n{\\n  bool is_overflow = false;\\n  undefined byte_index = 0;\\n  byte parameter_index = *(byte *)((int)parameter_array + 5);\\n  if (parameter_index < 4) {\\n    while (true) {\\n      int function_result = (**(code **)(**parameter_array + 8))();\\n      if (function_result == 0) {\\n        break;\\n      }\\n      byte current_byte_index = *(byte *)((int)parameter_array + 0x49);\\n      undefined byte_value = (**(code **)(**parameter_array + 0xc))();\\n      *(undefined *)((int)parameter_array + current_byte_index + 9) = byte_value;\\n      byte_index = current_byte_index + 1;\\n      *(byte *)((int)parameter_array + 0x49) = byte_index;\\n      if (byte_index > 0x3f) {\\n        is_overflow = true;\\n        break;\\n      }\\n    }\\n  }\\n  *(short *)(parameter_array + 0x14) = *(short *)(parameter_array + 0x14) + 1;\\n  char return_value;\\n  if (is_overflow) {\\n    return_value = -3;\\n    *(short *)(parameter_array + 0x15) = *(short *)(parameter_array + 0x15) + 1;\\n  }\\n  else {\\n    return_value = byte_index;\\n  }\\n  return (int)return_value;\\n}", 
        "called": [
            "FUN_00081318"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000801b0", 
        "calling": [
            "FUN_0008043e"
        ], 
        "imported": true, 
        "current_name": "process_parameter_000801b0"
    }, 
    "FUN_000813c2": {
        "renaming": {
            "uVar1": "bufferIndex", 
            "param_1": "bufferAddress", 
            "uint": "uint", 
            "param_2": "newChar", 
            "FUN_000813c2": "addCharToBuffer_000813c2"
        }, 
        "code": "void addCharToBuffer_000813c2(int bufferAddress, undefined newChar)\\n{\\n  uint bufferIndex = *(uint*)(bufferAddress + 0x80) + 1U & 0x7f;\\n  if (bufferIndex != *(uint*)(bufferAddress + 0x84)) {\\n    *(undefined*)(bufferAddress + *(uint*)(bufferAddress + 0x80)) = newChar;\\n    *(uint*)(bufferAddress + 0x80) = bufferIndex;\\n  }\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000813c2", 
        "calling": [], 
        "imported": true, 
        "current_name": "addCharToBuffer_000813c2"
    }, 
    "FUN_000814e4": {
        "renaming": {
            "undefined4": "undefined4", 
            "param_1": "paramsArray", 
            "undefined": "undefined", 
            "param_6": "param6", 
            "param_2": "param2", 
            "param_3": "param3", 
            "param_4": "param4", 
            "param_5": "param5", 
            "puVar1": "ptrToWriteFunction", 
            "FUN_000814e4": "initializeMemoryWriteParams_000814e4"
        }, 
        "code": "void initializeMemoryWriteParams_000814e4(undefined4* paramsArray, undefined4 param2, undefined param3, undefined4 param4, undefined4 param5, undefined4 param6)\\n{\\n  paramsArray[1] = 0;\\n  paramsArray[2] = 1000;\\n  paramsArray[6] = param2;\\n  paramsArray[0] = (undefined*)PTR_PTR_writeToMemory_00081454_1_00081504;\\n  *(undefined *)(paramsArray + 7) = param3;\\n  paramsArray[4] = param5;\\n  paramsArray[8] = param4;\\n  paramsArray[5] = param6;\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000814e4", 
        "calling": [
            "FUN_000815d4", 
            "FUN_00080c0c"
        ], 
        "imported": true, 
        "current_name": "initializeMemoryWriteParams_000814e4"
    }, 
    "FUN_00080d54": {
        "renaming": {
            "bVar1": "isFlagSet", 
            "undefined4": "undefined4", 
            "param_1": "paramsArray", 
            "uint": "uint", 
            "param_2": "newValue", 
            "param_3": "paramFlags", 
            "FUN_00080d54": "updateParamsArray_00080d54"
        }, 
        "code": "void updateParamsArray_00080d54(undefined4* paramsArray, undefined4 newValue, uint paramFlags)\\n{\\n  bool isFlagSet = (int)(paramFlags << 0x1f) < 0;\\n  paramsArray[0x11] = newValue;\\n  if (isFlagSet) {\\n    paramsArray[0x19] = newValue;\\n  }\\n  if (!isFlagSet) {\\n    paramsArray[0x18] = newValue;\\n  }\\n  isFlagSet = (paramFlags & 10) != 0;\\n  if (isFlagSet) {\\n    paramsArray[8] = newValue;\\n  }\\n  if (!isFlagSet) {\\n    paramsArray[9] = newValue;\\n  }\\n  if (((int)(paramFlags << 0x1e) < 0) || ((int)(paramFlags << 0x1c) < 0)) {\\n    paramsArray[0x20] = newValue;\\n  }\\n  paramsArray[5] = newValue;\\n  *paramsArray = newValue;\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080d54", 
        "calling": [
            "FUN_00080da0"
        ], 
        "imported": true, 
        "current_name": "updateParamsArray_00080d54"
    }, 
    "FUN_0008021c": {
        "renaming": {
            "iVar1": "i", 
            "param_1": "bufferAddress", 
            "uint": "uint", 
            "param_2": "bufferLength", 
            "cVar3": "bitIndex", 
            "uVar2": "checksum", 
            "uVar4": "bit", 
            "FUN_0008021c": "calculateChecksum_0008021c"
        }, 
        "code": "uint16_t calculateChecksum_0008021c(int bufferAddress, uint16_t bufferLength)\\n{\\n  uint16_t checksum = 0xffff;\\n  for (int i = bufferAddress; (i - bufferAddress & 0xffU) < bufferLength; i++) {\\n    checksum = checksum ^ *(byte *)(i + 9);\\n    char bitIndex = 8;\\n    do {\\n      uint16_t bit = checksum & 1;\\n      checksum = checksum >> 1;\\n      if (bit != 0) {\\n        checksum = checksum ^ 0xa001;\\n      }\\n      bitIndex--;\\n    } while (bitIndex != 0);\\n  }\\n  return (checksum & 0xff) << 8 | checksum >> 8;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008021c", 
        "calling": [
            "FUN_00080258"
        ], 
        "imported": true, 
        "current_name": "calculateChecksum_0008021c"
    }, 
    "FUN_00082b38": {
        "renaming": {
            "FUN_00082b38": "FUNC_00082b38"
        }, 
        "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUNC_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = check_parameter_and_update_data_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)process_data_block_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)findNullTerminatorIndex_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)findCharInBuffer_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_result_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_result_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_input_data_block_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n", 
        "called": [
            "FUN_00083808", 
            "FUN_00083b14", 
            "FUN_00082ac0", 
            "FUN_00084384", 
            "FUN_00082a50", 
            "FUN_0008378c", 
            "FUN_00084750"
        ], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x00082b38", 
        "calling": [
            "FUN_0008378c"
        ], 
        "current_name": "FUNC_00082b38"
    }, 
    "FUN_00081e04": {
        "renaming": {
            "FUN_00081e04": "execute_skipped_function_00081e04", 
            "param_1": "param", 
            "FUNC_00083d9c": "FUNC_FUNCTION", 
            "*DAT_00081e10": "skipped_func_ptr"
        }, 
        "code": "void execute_skipped_function_00081e04(int **DAT_00081e10, undefined4 param)\\n{\\n  FUNC_FUNCTION(*DAT_00081e10, param);\\n  return;\\n}", 
        "called": [
            "FUN_00083d9c"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081e04", 
        "calling": [
            "FUN_0008160c", 
            "FUN_000815fe"
        ], 
        "imported": true, 
        "current_name": "execute_skipped_function_00081e04"
    }, 
    "FUN_00084750": {
        "renaming": {
            "iVar1": "result", 
            "FUN_00084750": "calculate_result_00084750", 
            "param_1": "param_1", 
            "calculateValues_000847ac": "calculate_values", 
            "param_2": "param_2", 
            "param_3": "param_3", 
            "param_4": "param_4"
        }, 
        "code": "int calculate_result_00084750(int param_1, int param_2, int param_3, int param_4)\\n{\\n  if ((param_4 == 0) && (param_3 == 0)) {\\n    if (param_2 != 0 || param_1 != 0) {\\n      return -1;\\n    }\\n    else {\\n      return 0;\\n    }\\n  }\\n  else {\\n    int result = calculate_values();\\n    return result;\\n  }\\n}", 
        "called": [
            "FUN_000847ac"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00084750", 
        "calling": [
            "FUN_00082b38"
        ], 
        "imported": true, 
        "current_name": "calculate_result_00084750"
    }, 
    "FUN_00080ae4": {
        "renaming": {
            "iVar3": "parameter_3", 
            "iVar4": "parameter_4", 
            "iVar5": "parameter_2", 
            "FUN_00080ae4": "initialize_system_00080ae4", 
            "puVar2": "parameter_array", 
            "iVar6": "parameter_1", 
            "iVar7": "loop_index", 
            "puVar1": "system_time"
        }, 
        "code": "void initialize_system_00080ae4(void)\\n{\\n  uint *system_time = SYSTEM_TIME_PTR;\\n  initialize_registers();\\n  undefined4 *parameter_array = PARAMETER_ARRAY_PTR;\\n  parameter_array[1] = *system_time / 1000 - 1;\\n  *(undefined *)(MEMORY_PTR + 0x23) = 0xf0;\\n  parameter_array[2] = 0;\\n  *parameter_array = 7;\\n  execute_system_functions();\\n  for (int i = 0; i < 0x4f; i++) {\\n    update_parameter(i, 0);\\n  }\\n  int parameter_1 = PARAMETER_1_PTR;\\n  int parameter_2 = PARAMETER_2_PTR;\\n  int parameter_3 = PARAMETER_3_PTR;\\n  int parameter_4 = PARAMETER_4_PTR;\\n  *(undefined4 *)(parameter_1 + 0xa0) = -1;\\n  *(undefined4 *)(parameter_2 + 0xa0) = -1;\\n  *(undefined4 *)(parameter_3 + 0xa0) = -1;\\n  *(undefined4 *)(parameter_4 + 0xa0) = -1;\\n  handle_parameter(parameter_3, 1, 0x300, 0);\\n  update_parameter(0, 1);\\n  handle_parameter(parameter_3, 1, 0xc00, 0);\\n  handle_parameter(parameter_3, 1, 0x3000, 0);\\n  handle_parameter(parameter_2, 2, 0x30, 0);\\n  handle_parameter(parameter_4, 1, 0xc00, 0);\\n  handle_parameter(parameter_3, 1, 3, 0);\\n  handle_parameter(parameter_4, 1, 0xc000, 0);\\n  set_bit_in_memory(0x25);\\n  calculate_value(DAT_00080c08,*system_time,DAT_00080c04,0xc);\\n  set_values(DAT_00080c08, 0, 0x300000, 1);\\n  set_bit_in_parameter(DAT_00080c08, 0, 0);\\n  set_parameter_value(DAT_00080c08, -1);\\n  set_default_value(DAT_00080c08);\\n  return;\\n}", 
        "called": [
            "FUN_0008106e", 
            "FUN_00080e9c", 
            "FUN_00081d7c", 
            "FUN_00081034", 
            "FUN_00080e18", 
            "FUN_00081066", 
            "FUN_00081042", 
            "FUN_00080f9c", 
            "FUN_00081318", 
            "FUN_00080da0"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080ae4", 
        "calling": [
            "FUN_000816a8"
        ], 
        "imported": true, 
        "current_name": "initialize_system_00080ae4"
    }, 
    "FUN_00081d5c": {
        "renaming": {
            "iVar3": "bufferAddress", 
            "FUN_00081d5c": "addParamToBuffer_00081d5c", 
            "undefined4": "undefined4", 
            "param_1": "param1", 
            "param_2": "param2", 
            "param_3": "param3", 
            "puVar1": "bufferPtr", 
            "uVar2": "bufferIndex", 
            "uVar4": "bitMask"
        }, 
        "code": "undefined4 addParamToBuffer_00081d5c(undefined4 param1, undefined4 param2, undefined4 param3)\\n{\\n  uint bufferIndex;\\n  uint* bufferPtr = *(uint**)(DAT_0008396c + 0x148);\\n  if (bufferPtr == (uint*)0x0) {\\n    bufferPtr = (uint*)(DAT_0008396c + 0x14c);\\n    *(uint**)(DAT_0008396c + 0x148) = bufferPtr;\\n  }\\n  bufferIndex = bufferPtr[1];\\n  if (0x1f < (int)bufferIndex) {\\n    if ((DAT_00083970 == 0) ||\\n       ((bufferPtr = (uint*)allocateMemory(400)), bufferPtr == (uint*)0x0)) {\\n      return 0xffffffff;\\n    }\\n    *bufferPtr = *(uint*)(DAT_0008396c + 0x148);\\n    bufferPtr[1] = 0;\\n    bufferIndex = 0;\\n    *(uint**)(DAT_0008396c + 0x148) = bufferPtr;\\n    bufferPtr[0x62] = 0;\\n    bufferPtr[99] = 0;\\n  }\\n  uint bitMask = 1 << (bufferIndex & 0xff);\\n  bufferPtr[bufferIndex + 0x22] = param1;\\n  bufferPtr[0x62] = bufferPtr[0x62] | bitMask;\\n  bufferPtr[bufferIndex + 0x42] = param3;\\n  bufferPtr[99] = bitMask | bufferPtr[99];\\n  bufferPtr[1] = bufferIndex + 1;\\n  bufferPtr[bufferIndex + 2] = param2;\\n  return 0;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081d5c", 
        "calling": [
            "FUN_00080a68"
        ], 
        "imported": true, 
        "current_name": "addParamToBuffer_00081d5c"
    }, 
    "FUN_00082970": {
        "renaming": {
            "iVar2": "return_value", 
            "addToGlobalVariable_0008118c": "add_to_global_variable", 
            "FUN_00082970": "set_param_to_global_var_if_return_is_negative_00082970", 
            "param_1": "output_value", 
            "param_2": "param", 
            "puVar1": "global_var"
        }, 
        "code": "void set_param_to_global_var_if_return_is_negative_00082970(int *output_value, undefined4 param)\\n{\\n  undefined *global_var = PTR_DAT_00082990;\\n  *(undefined4 *)PTR_DAT_00082990 = 0;\\n  int return_value = add_to_global_variable(param);\\n  if (return_value == -1 && (*(int *)global_var != 0)) {\\n    *output_value = *(int *)global_var;\\n    return;\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_0008118c"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00082970", 
        "calling": [
            "FUN_00081e14", 
            "FUN_00083d00"
        ], 
        "imported": true, 
        "current_name": "set_param_to_global_var_if_return_is_negative_00082970"
    }, 
    "FUN_000811be": {
        "renaming": {
            "undefined4": "uint8_t", 
            "FUN_000811be": "returnTrue_000811be"
        }, 
        "code": "uint8_t returnTrue_000811be()\\n{\\n  return 1;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000811be", 
        "calling": [
            "FUN_000846dc"
        ], 
        "imported": true, 
        "current_name": "returnTrue_000811be"
    }, 
    "FUN_00084a80": {
        "renaming": {
            "FUN_00084a80": "FUNC_00084a80"
        }, 
        "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n", 
        "called": [], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x00084a80", 
        "calling": [
            "FUN_000847ac"
        ], 
        "current_name": "FUNC_00084a80"
    }, 
    "FUN_00081c54": {
        "renaming": {
            "concatenate_params_to_64bit_word_00081c5c": "concatenate_params_to_64bit_word", 
            "param_1": "parameter_1", 
            "param_2": "parameter_2", 
            "FUN_00081c54": "concatenate_parameters_to_64bit_word_00081c54"
        }, 
        "code": "void concatenate_parameters_to_64bit_word_00081c54(undefined4 parameter_1, undefined4 parameter_2)\\n{\\n  concatenate_params_to_64bit_word(parameter_2, parameter_1);\\n  return;\\n}", 
        "called": [
            "FUN_00081c5c"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081c54", 
        "calling": [
            "FUN_00081ca8"
        ], 
        "imported": true, 
        "current_name": "concatenate_parameters_to_64bit_word_00081c54"
    }, 
    "FUN_0008163a": {
        "renaming": {
            "iVar1": "function_status", 
            "param_1": "data_address", 
            "param_2": "data_size", 
            "FUN_0008163a": "check_and_execute_function_0008163a"
        }, 
        "code": "undefined4 check_and_execute_function_0008163a(int *data_address, uint data_size)\\n{\\n  int function_status;\\n  if ((*data_address == 0) || ((uint)data_address[1] < data_size)) {\\n    function_status = execute_skipped_function(data_address, data_size);\\n    if (function_status == 0) {\\n      return 0;\\n    }\\n    if (data_address[2] == 0) {\\n      *(undefined *)*data_address = 0;\\n    }\\n  }\\n  return 1;\\n}", 
        "called": [
            "FUN_00081622"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008163a", 
        "calling": [
            "FUN_0008165c"
        ], 
        "imported": true, 
        "current_name": "check_and_execute_function_0008163a"
    }, 
    "FUN_000825a0": {
        "renaming": {
            "param_1": "data_point_1", 
            "param_2": "data_point_2", 
            "FUN_000825a0": "execute_skipped_function_with_two_data_points_000825a0"
        }, 
        "code": "void execute_skipped_function_with_two_data_points_000825a0(undefined4 data_point_1, undefined4 data_point_2)\\n{\\n  FUNC_FUNCTION(*DAT_000825ac, data_point_1, data_point_2);\\n  return;\\n}", 
        "called": [
            "FUN_000825b0"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000825a0", 
        "calling": [
            "FUN_00081622"
        ], 
        "imported": true, 
        "current_name": "execute_skipped_function_with_two_data_points_000825a0"
    }, 
    "FUN_000815d4": {
        "renaming": {
            "param_1": "memory_write_params", 
            "initializeMemoryWriteParams_000814e4": "set_memory_write_params", 
            "param_2": "memory_write_value", 
            "FUN_000815d4": "initialize_memory_write_params_000815d4"
        }, 
        "code": "undefined4 initialize_memory_write_params_000815d4(undefined4 *memory_write_params, undefined4 memory_write_value)\\n{\\n  set_memory_write_params();\\n  *memory_write_params = PTR_PTR_writeToMemory_00081454_1_000815f4;\\n  memory_write_params[9] = memory_write_value;\\n  return memory_write_params;\\n}", 
        "called": [
            "FUN_000814e4"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000815d4", 
        "calling": [
            "FUN_00080c0c"
        ], 
        "imported": true, 
        "current_name": "initialize_memory_write_params_000815d4"
    }, 
    "FUN_00081e14": {
        "renaming": {
            "FUN_00081e14": "FUNC_00081e14"
        }, 
        "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  doNothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      doNothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        doNothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      doNothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      doNothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            doNothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            doNothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = set_param_to_global_var_if_return_is_negative_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = set_param_to_global_var_if_return_is_negative_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUNC_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    doNothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  doNothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n", 
        "called": [
            "FUN_00083d9c", 
            "FUN_0008259c", 
            "FUN_00082970", 
            "FUN_00082598"
        ], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x00081e14", 
        "calling": [
            "FUN_00083f34", 
            "FUN_000842a4", 
            "FUN_000825b0", 
            "FUN_00081df4"
        ], 
        "current_name": "FUNC_00081e14"
    }, 
    "FUN_00080164": {
        "renaming": {
            "iVar2": "function_result", 
            "FUN_00080164": "process_data_00080164", 
            "param_1": "data_array", 
            "puVar1": "function_pointer"
        }, 
        "code": "void process_data_00080164(int **data_array)\\n{\\n  undefined *function_pointer = FUNCTION_PTR;\\n  *data_array = (int *)FUNCTION_PTR;\\n  (**(code **)(*(int *)function_pointer + 0x18))(FUNCTION_PTR);\\n  byte parameter_index = *(byte *)((int)data_array + 6);\\n  if (parameter_index > 1) {\\n    handle_parameter(parameter_index, 1);\\n    update_parameter(parameter_index, 0);\\n  }\\n  int function_result;\\n  do {\\n    function_result = (**(code **)(**data_array + 0xc))();\\n  } while (function_result >= 0);\\n  *(undefined *)((int)data_array + 0x49) = 0;\\n  *(undefined *)((int)data_array + 0x4a) = 0;\\n  *(undefined2 *)(data_array + 0x15) = 0;\\n  *(undefined2 *)((int)data_array + 0x52) = 0;\\n  *(undefined2 *)(data_array + 0x14) = 0;\\n  return;\\n}", 
        "called": [
            "FUN_00081210", 
            "FUN_00081318"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080164", 
        "calling": [
            "FUN_000804a8"
        ], 
        "imported": true, 
        "current_name": "process_data_00080164"
    }, 
    "FUN_000811cc": {
        "renaming": {
            "iVar1": "i", 
            "FUN_000811cc": "writeBytesToMemory_000811cc", 
            "undefined4": "uint32_t", 
            "param_1": "memoryAddress", 
            "param_2": "bufferAddress", 
            "param_3": "bufferLength"
        }, 
        "code": "uint32_t writeBytesToMemory_000811cc(uint32_t memoryAddress, int bufferAddress, uint32_t bufferLength)\\n{\\n  for (int i = 0; i < (int)bufferLength; i++) {\\n    // wait until previous write is complete\\n    while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(bufferAddress + i);\\n  }\\n  return bufferLength & ~((int)bufferLength >> 0x1f);\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000811cc", 
        "calling": [
            "FUN_00084464"
        ], 
        "imported": true, 
        "current_name": "writeBytesToMemory_000811cc"
    }, 
    "FUN_000846dc": {
        "renaming": {
            "iVar2": "return_value", 
            "returnTrue_000811be": "return_true", 
            "FUN_000846dc": "set_param_to_true_if_return_is_negative_000846dc", 
            "param_1": "output_value", 
            "param_2": "param", 
            "puVar1": "param_data"
        }, 
        "code": "void set_param_to_true_if_return_is_negative_000846dc(int *output_value, undefined4 param)\\n{\\n  undefined *param_data = PTR_DAT_000846fc;\\n  *(undefined4 *)PTR_DAT_000846fc = 0;\\n  int return_value = return_true(param);\\n  if (return_value == -1 && (*(int *)param_data != 0)) {\\n    *output_value = *(int *)param_data;\\n    return;\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_000811be"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000846dc", 
        "calling": [
            "FUN_000842a4"
        ], 
        "imported": true, 
        "current_name": "set_param_to_true_if_return_is_negative_000846dc"
    }, 
    "FUN_00081894": {
        "renaming": {
            "iVar1": "leadingZeros", 
            "iVar3": "fixedPointValue", 
            "FUN_00081894": "convertToFixedPoint_00081894", 
            "param_1": "value", 
            "uint": "uint32_t", 
            "uVar2": "fractionalBitIndex", 
            "uVar4": "fractionalPart"
        }, 
        "code": "uint32_t convertToFixedPoint_00081894(uint32_t value)\\n{\\n  if (value == 0) {\\n    return 0;\\n  }\\n  int leadingZeros = count_leading_zeroes(value);\\n  uint32_t fractionalBitIndex = leadingZeros - 8;\\n  int32_t fixedPointValue = fractionalBitIndex * -0x800000 + 0x4a800000;\\n  if (7 < leadingZeros) {\\n    uint32_t fractionalPart = 0 << (fractionalBitIndex & 0xff);\\n    fixedPointValue += (value << (fractionalBitIndex & 0xff)) + (0U >> (0x20 - fractionalBitIndex & 0xff)) + (uint32_t)(0x7fffffff < fractionalPart);\\n    if (fractionalPart == 0x80000000) {\\n      fixedPointValue = fixedPointValue & 0xfffffffe;\\n    }\\n    return fixedPointValue;\\n  }\\n  uint32_t fractionalPart = value << (leadingZeros + 0x18U & 0xff);\\n  fixedPointValue += ((value >> (0x20 - (leadingZeros + 0x18U) & 0xff)) - ((int32_t)fractionalPart >> 0x1f));\\n  if ((fractionalPart & 0x7fffffff) == 0) {\\n    fixedPointValue = fixedPointValue & ~(fractionalPart >> 0x1f);\\n  }\\n  return fixedPointValue;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081894", 
        "calling": [
            "FUN_000805d0"
        ], 
        "imported": true, 
        "current_name": "convertToFixedPoint_00081894"
    }, 
    "FUN_000845bc": {
        "renaming": {
            "undefined4": "uint32_t", 
            "FUN_000845bc": "writeByteToMemory_000845bc", 
            "param_1": "memoryAddress", 
            "undefined": "uint8_t", 
            "param_2": "byteValue", 
            "param_3": "byteCount"
        }, 
        "code": "uint32_t writeByteToMemory_000845bc(uint32_t* memoryAddress, uint8_t byteValue, uint32_t byteCount)\\n{\\n  if (byteCount == 0 || memoryAddress == NULL) {\\n    return 0;\\n  }\\n  if (byteCount < 0x100) {\\n    *memoryAddress = (uint32_t)byteValue;\\n    return 1;\\n  }\\n  *memoryAddress = 0x8a;\\n  return 0xffffffff;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000845bc", 
        "calling": [
            "FUN_0008456c"
        ], 
        "imported": true, 
        "current_name": "writeByteToMemory_000845bc"
    }, 
    "FUN_00085858": {
        "renaming": {
            "FUN_00085858": "doNothing_00085858"
        }, 
        "code": "void doNothing_00085858()\\n{\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00085858", 
        "calling": [
            "FUN_00081d7c"
        ], 
        "imported": true, 
        "current_name": "doNothing_00085858"
    }, 
    "FUN_00082504": {
        "renaming": {
            "undefined4": "uint32_t", 
            "puVar2": "nextMemoryAddress", 
            "param_1": "memoryAddress", 
            "FUN_00082504": "fillMemoryWithByte_00082504", 
            "undefined": "uint8_t", 
            "param_2": "byteValue", 
            "param_3": "byteCount", 
            "puVar1": "currentMemoryAddress", 
            "uVar3": "pattern", 
            "uVar4": "endAddress", 
            "bVar5": "isByteCountZero"
        }, 
        "code": "void fillMemoryWithByte_00082504(uint32_t* memoryAddress, uint8_t byteValue, uint32_t byteCount)\\n{\\n  if (((uint32_t)memoryAddress & 3) != 0) {\\n    if (byteCount == 0) {\\n      return;\\n    }\\n    while (true) {\\n      *memoryAddress = (uint32_t)byteValue;\\n      byteCount--;\\n      memoryAddress = (uint32_t*)((uint32_t)memoryAddress + 1);\\n      if (((uint32_t)memoryAddress & 3) == 0) {\\n        break;\\n      }\\n      if (byteCount == 0) {\\n        return;\\n      }\\n    }\\n  }\\n  if (byteCount >= 4) {\\n    uint32_t pattern = (byteValue << 24) | (byteValue << 16) | (byteValue << 8) | byteValue;\\n    uint32_t* endAddress = memoryAddress + (byteCount >> 2);\\n    while (memoryAddress != endAddress) {\\n      *memoryAddress = pattern;\\n      memoryAddress++;\\n    }\\n    byteCount &= 3;\\n  }\\n  if (byteCount != 0) {\\n    uint8_t* byteAddress = (uint8_t*)memoryAddress;\\n    while (byteCount != 0) {\\n      *byteAddress = byteValue;\\n      byteAddress++;\\n      byteCount--;\\n    }\\n  }\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00082504", 
        "calling": [
            "FUN_000813a8", 
            "FUN_00083b14"
        ], 
        "imported": true, 
        "current_name": "fillMemoryWithByte_00082504"
    }, 
    "FUN_000800f4": {
        "renaming": {
            "PTR_DAT_0008010c": "isParameterInitialized", 
            "DAT_00080114": "defaultParameterValue", 
            "DAT_00080110": "defaultParameterValue", 
            "undefined4": "uint32_t", 
            "param_1": "parameter", 
            "*PTR_DAT_0008010c": "isParameterInitializedValue", 
            "FUN_000800f4": "getParameterValue_000800f4"
        }, 
        "code": "uint32_t getParameterValue_000800f4(uint32_t parameter)\\n{\\n  if (*PTR_DAT_0008010c == 0) {\\n    if (DAT_00080110 != 0) {\\n      parameter = DAT_00080110;\\n    }\\n    *PTR_DAT_0008010c = 1;\\n  }\\n  return parameter;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000800f4", 
        "calling": [], 
        "imported": true, 
        "current_name": "getParameterValue_000800f4"
    }, 
    "FUN_0008378c": {
        "renaming": {
            "local_47c": "data_flags", 
            "iVar1": "status", 
            "local_46c": "data_id", 
            "iVar2": "is_data_valid", 
            "local_47a": "result_buffer_flags", 
            "FUNC_00083adc": "is_data_valid_00083adc", 
            "param_1": "parameter_1", 
            "auStack_420": "result_buffer_data", 
            "local_424": "data_type", 
            "FUNC_00082b38": "process_input_data_block", 
            "local_488": "data_buffer", 
            "local_478": "result_buffer", 
            "local_464": "result_size", 
            "local_474": "result_buffer_size", 
            "param_2": "data_block", 
            "FUN_0008378c": "process_data_block_0008378c", 
            "local_480": "result_buffer_size", 
            "local_470": "result_buffer_offset"
        }, 
        "code": "int process_data_block_0008378c(uint32_t parameter_1, int *data_block)\\n{\\n  int status;\\n  int is_data_valid;\\n  undefined *data_buffer[2];\\n  undefined2 data_flags;\\n  undefined *result_buffer;\\n  undefined4 data_size;\\n  undefined4 result_size;\\n  undefined4 data_type;\\n  undefined4 data_id;\\n  undefined auStack[1024];\\n  data_type = *(undefined4 *)(data_block + 7);\\n  data_id = *(undefined4 *)(data_block + 4);\\n  data_size = *(undefined4 *)(data_block + 6);\\n  result_size = *(undefined4 *)(data_block + 5);\\n  data_flags = *(undefined2 *)(data_block + 3) & 0xfffd;\\n  data_buffer[0] = auStack;\\n  data_buffer[1] = (undefined *)0x0;\\n  result_buffer = data_buffer[0];\\n  *(undefined4 *)(result_buffer + 0x400) = 0x400;\\n  *(undefined4 *)(result_buffer + 0x404) = 0x400;\\n  *(undefined4 *)(result_buffer + 0x408) = 0;\\n  data_buffer[1] = result_buffer;\\n  status = process_input_data_block(parameter_1, data_size, data_buffer);\\n  is_data_valid = is_data_valid_00083adc(parameter_1, data_buffer);\\n  if ((status >= 0) && (is_data_valid != 0)) {\\n    status = -1;\\n  }\\n  if ((int)((uint)data_flags << 0x19) < 0) {\\n    *(undefined2 *)(data_block + 3) = *(undefined2 *)(data_block + 3) | 0x40;\\n  }\\n  return status;\\n}", 
        "called": [
            "FUN_00083adc", 
            "FUN_00082b38"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008378c", 
        "calling": [
            "FUN_00082b38"
        ], 
        "imported": true, 
        "current_name": "process_data_block_0008378c"
    }, 
    "FUN_00083adc": {
        "renaming": {
            "FUN_00083adc": "FUNC_00083adc"
        }, 
        "code": "\nundefined4 FUNC_00083adc(int *param_1,int *param_2)\n\n{\n  int *piVar1;\n  int iVar2;\n  ushort uVar3;\n  uint uVar4;\n  int iVar5;\n  code *pcVar6;\n  undefined4 unaff_r4;\n  int iVar7;\n  \n  if ((param_1 != (int *)0x0) && (param_1[0xe] == 0)) {\n    FUNC_00083b14();\n  }\n  if (*(short *)(param_2 + 3) == 0) {\n    return 0;\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  if ((int)((uint)uVar3 << 0x1c) < 0) {\n    iVar7 = param_2[4];\n    if (iVar7 == 0) {\n      return 0;\n    }\n    iVar2 = *param_2;\n    if ((uVar3 & 3) == 0) {\n      iVar5 = param_2[5];\n    }\n    else {\n      iVar5 = 0;\n    }\n    *param_2 = iVar7;\n    iVar2 = iVar2 - iVar7;\n    param_2[2] = iVar5;\n    do {\n      if (iVar2 < 1) {\n        return 0;\n      }\n      iVar5 = (*(code *)param_2[9])(param_1,param_2[7],iVar7,iVar2,unaff_r4);\n      iVar2 = iVar2 - iVar5;\n      iVar7 = iVar7 + iVar5;\n    } while (0 < iVar5);\nLAB_00083a54:\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(param_2 + 3) = uVar3 | 0x800;\n  if ((param_2[1] < 1) && (param_2[0xf] < 1)) {\n    return 0;\n  }\n  pcVar6 = (code *)param_2[10];\n  if (pcVar6 == (code *)0x0) {\n    return 0;\n  }\n  uVar4 = (uint)(uVar3 | 0x800);\n  iVar7 = *param_1;\n  *param_1 = 0;\n  if ((uVar3 & 0x1000) == 0) {\n    iVar2 = (*pcVar6)(param_1,param_2[7],uVar4 & 0x1000,1);\n    if ((iVar2 == -1) && (iVar5 = *param_1, iVar5 != 0)) {\n      if ((iVar5 == 0x1d) || (iVar5 == 0x16)) {\n        *param_1 = iVar7;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    uVar4 = (uint)*(ushort *)(param_2 + 3);\n    pcVar6 = (code *)param_2[10];\n  }\n  else {\n    iVar2 = param_2[0x14];\n  }\n  if (((int)(uVar4 << 0x1d) < 0) && (iVar2 = iVar2 - param_2[1], param_2[0xc] != 0)) {\n    iVar2 = iVar2 - param_2[0xf];\n  }\n  iVar2 = (*pcVar6)(param_1,param_2[7],iVar2,0);\n  if (iVar2 == -1) {\n    iVar5 = *param_1;\n    if (iVar5 != 0) {\n      if ((iVar5 != 0x1d) && (iVar5 != 0x16)) {\n        *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xf7ff;\n      *param_2 = param_2[4];\n      param_2[1] = 0;\n      goto LAB_00083a00;\n    }\n    uVar3 = *(ushort *)(param_2 + 3) & 0xf7ff;\n    param_2[1] = 0;\n    *(ushort *)(param_2 + 3) = uVar3;\n    *param_2 = param_2[4];\n  }\n  else {\n    uVar3 = *(ushort *)(param_2 + 3) & 0xf7ff;\n    *param_2 = param_2[4];\n    *(ushort *)(param_2 + 3) = uVar3;\n    param_2[1] = 0;\n  }\n  if ((int)((uint)uVar3 << 0x13) < 0) {\n    param_2[0x14] = iVar2;\n  }\nLAB_00083a00:\n  piVar1 = (int *)param_2[0xc];\n  *param_1 = iVar7;\n  if (piVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (piVar1 != param_2 + 0x10) {\n    FUNC_00083d9c(param_1);\n  }\n  param_2[0xc] = 0;\n  return 0;\n}\n\n", 
        "called": [
            "FUN_00083d9c", 
            "FUN_00083b14"
        ], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x00083adc", 
        "calling": [
            "FUN_000846a4", 
            "FUN_00083f34", 
            "FUN_000844c4", 
            "FUN_0008378c"
        ], 
        "current_name": "FUNC_00083adc"
    }, 
    "FUN_000825b0": {
        "renaming": {
            "FUN_000825b0": "FUNC_000825b0"
        }, 
        "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  doNothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        doNothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              copyMemory_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            doNothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              copyMemory_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          copyMemory_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        copyMemory_00082438(piVar9,param_2);\n      }\n      FUNC_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUNC_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  doNothing_0008259c(param_1);\n  return piVar9;\n}\n\n", 
        "called": [
            "FUN_00083d9c", 
            "FUN_00081e14", 
            "FUN_0008259c", 
            "FUN_00082438", 
            "FUN_00082598"
        ], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x000825b0", 
        "calling": [
            "FUN_00083f34", 
            "FUN_000825a0"
        ], 
        "current_name": "FUNC_000825b0"
    }, 
    "FUN_000803d4": {
        "renaming": {
            "*(byte *)(param_1 + 10)": "byteValue", 
            "iVar1": "index", 
            "byte": "byteValue", 
            "undefined4": "uint32_t", 
            "param_1": "value", 
            "*(short *)(param_1 + 0x54)": "counter", 
            "PTR_DAT_0008040c": "allowedValues", 
            "*(uint8_t*)(value + 10)": "byteValue", 
            "*(int16_t*)(value + 0x54)": "counter", 
            "FUN_000803d4": "checkValue_000803d4"
        }, 
        "code": "uint32_t checkValue_000803d4(int32_t value)\\n{\\n  int32_t byteValue = *(uint8_t*)(value + 10);\\n  if ((byteValue << 0x18) < 0) {\\n    *(int16_t*)(value + 0x54) = *(int16_t*)(value + 0x54) + 1;\\n    return 0xfb;\\n  }\\n  for (int i = 0; i < 8; i++) {\\n    if (PTR_DAT_0008040c[i] == byteValue) {\\n      return 0;\\n    }\\n  }\\n  *(int16_t*)(value + 0x54) = *(int16_t*)(value + 0x54) + 1;\\n  return 1;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000803d4", 
        "calling": [
            "FUN_0008043e"
        ], 
        "imported": true, 
        "current_name": "checkValue_000803d4"
    }, 
    "FUN_0008043e": {
        "renaming": {
            "iVar4": "check_result", 
            "param_1": "data_ptr", 
            "piVar3": "stored_value_ptr", 
            "unaff_r6": "data_size", 
            "cVar1": "error_code", 
            "uVar2": "function_result", 
            "FUN_0008043e": "process_data_0008043e"
        }, 
        "code": "int process_data_0008043e(int **data_ptr)\\n{\\n  char error_code = '\\0';\\n  uint function_result;\\n  int *stored_value_ptr;\\n  uint data_size;\\n  if (*(byte *)((int)data_ptr + 5) < 4) {\\n    function_result = (**(code **)(**data_ptr + 8))();\\n    data_size = function_result & 0xff;\\n  }\\n  stored_value_ptr = (int *)getStoredValue_thunk_00081714();\\n  if (data_ptr[0x17] < stored_value_ptr) {\\n    *(undefined *)(data_ptr + 2) = 0xff;\\n    *(undefined *)((int)data_ptr + 7) = 0;\\n    *(short *)(data_ptr + 0x15) = *(short *)(data_ptr + 0x15) + 1;\\n  }\\n  else if (data_size > 7) {\\n    process_parameter_000801b0(data_ptr);\\n    int check_result = checkValue_000803d4(data_ptr);\\n    if (check_result == 0) {\\n      if (*(byte *)((int)data_ptr + 10) - 3 < 2) {\\n        write_combined_bytes_to_memory_00080410(data_ptr);\\n      }\\n      *(undefined *)((int)data_ptr + 7) = 0;\\n      error_code = *(char *)((int)data_ptr + 0x49);\\n    }\\n    else {\\n      *(undefined *)((int)data_ptr + 7) = 0;\\n      error_code = (char)check_result;\\n    }\\n  }\\n  return (int)error_code;\\n}", 
        "called": [
            "FUN_00080410", 
            "FUN_000801b0", 
            "thunk_FUN_00081714", 
            "FUN_000803d4"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008043e", 
        "calling": [
            "FUN_000805d0"
        ], 
        "imported": true, 
        "current_name": "process_data_0008043e"
    }, 
    "FUN_0008160c": {
        "renaming": {
            "FUN_0008160c": "reset_data_0008160c", 
            "param_1": "data"
        }, 
        "code": "void reset_data_0008160c(int *data)\\n{\\n  if (*data != 0) {\\n    execute_skipped_function();\\n  }\\n  *data = 0;\\n  data[1] = 0;\\n  data[2] = 0;\\n  return;\\n}", 
        "called": [
            "FUN_00081e04"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008160c", 
        "calling": [
            "FUN_0008165c"
        ], 
        "imported": true, 
        "current_name": "reset_data_0008160c"
    }, 
    "FUN_00080e18": {
        "renaming": {
            "FUN_00080e18": "setBitInMemory_00080e18", 
            "uVar1": "bitMask", 
            "undefined4": "uint32_t", 
            "param_1": "bitIndex", 
            "DAT_00080e58": "memoryAddress"
        }, 
        "code": "uint32_t setBitInMemory_00080e18(uint32_t bitIndex)\\n{\\n  if (bitIndex < 0x2d) {\\n    if (bitIndex < 0x20) {\\n      uint32_t bitMask = 1 << bitIndex;\\n      if ((bitMask & *(uint32_t*)(DAT_00080e58 + 0x18)) != bitMask) {\\n        *(uint32_t*)(DAT_00080e58 + 0x10) = bitMask;\\n      }\\n    }\\n    else {\\n      uint32_t bitMask = 1 << (bitIndex - 0x20);\\n      if ((bitMask & *(uint32_t*)(DAT_00080e58 + 0x108)) != bitMask) {\\n        *(uint32_t*)(DAT_00080e58 + 0x100) = bitMask;\\n      }\\n    }\\n    return 0;\\n  }\\n  return 1;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080e18", 
        "calling": [
            "FUN_00081210", 
            "FUN_00080ae4", 
            "FUN_00081508"
        ], 
        "imported": true, 
        "current_name": "setBitInMemory_00080e18"
    }, 
    "FUN_00081184": {
        "renaming": {
            "FUN_00081184": "doNothing_00081184", 
            "undefined4": "void"
        }, 
        "code": "void doNothing_00081184(void)\\n{\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081184", 
        "calling": [], 
        "imported": true, 
        "current_name": "doNothing_00081184"
    }, 
    "FUN_00084298": {
        "renaming": {
            "FUN_00084298": "getDatValue_00084298", 
            "DAT_000842a0": "datValuePointer", 
            "undefined4": "uint32_t"
        }, 
        "code": "uint32_t getDatValue_00084298(void)\\n{\\n  return *DAT_000842a0;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00084298", 
        "calling": [
            "FUN_00083c40"
        ], 
        "imported": true, 
        "current_name": "getDatValue_00084298"
    }, 
    "FUN_00081066": {
        "renaming": {
            "FUN_00081066": "setDefaultValue_00081066", 
            "undefined4": "void", 
            "param_1": "value"
        }, 
        "code": "void setDefaultValue_00081066(int32_t value)\\n{\\n  *(int32_t*)(value + 0x14) = -1;\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081066", 
        "calling": [
            "FUN_00080ae4"
        ], 
        "imported": true, 
        "current_name": "setDefaultValue_00081066"
    }, 
    "FUN_00081cd0": {
        "renaming": {
            "uVar1": "shiftValue", 
            "FUN_00081cd0": "decodeValue_00081cd0", 
            "undefined4": "uint32_t", 
            "param_1": "encodedValue", 
            "decodedValue": "decodedValue", 
            "uVar2": "difference"
        }, 
        "code": "uint32_t decodeValue_00081cd0(uint32_t encodedValue)\\n{\\n  if (encodedValue << 1 < 0x7f000000) {\\n    return 0;\\n  }\\n  uint32_t shiftValue = (encodedValue << 1) >> 0x18;\\n  uint32_t difference = 0x9e - shiftValue;\\n  if (shiftValue < 0x9f && difference != 0) {\\n    uint32_t decodedValue = (encodedValue << 8 | 0x80000000) >> (difference & 0xff);\\n    if ((encodedValue & 0x80000000) != 0) {\\n      decodedValue = -decodedValue;\\n    }\\n    return decodedValue;\\n  }\\n  if ((difference == 0xffffff9f) && ((encodedValue & 0x7fffff) != 0)) {\\n    return 0;\\n  }\\n  encodedValue = encodedValue & 0x80000000;\\n  if (encodedValue == 0) {\\n    encodedValue = 0x7fffffff;\\n  }\\n  return encodedValue;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081cd0", 
        "calling": [
            "FUN_000805d0"
        ], 
        "imported": true, 
        "current_name": "decodeValue_00081cd0"
    }, 
    "FUN_00081df4": {
        "renaming": {
            "FUN_00081df4": "execute_skipped_function_with_data_00081df4", 
            "param_1": "value"
        }, 
        "code": "void execute_skipped_function_with_data_00081df4(int *data, undefined4 value)\\n{\\n  FUNC_FUNCTION(*DAT_00081e00, value);\\n  return;\\n}", 
        "called": [
            "FUN_00081e14"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081df4", 
        "calling": [
            "FUN_00083974"
        ], 
        "imported": true, 
        "current_name": "execute_skipped_function_with_data_00081df4"
    }, 
    "FUN_00080410": {
        "renaming": {
            "bVar3": "byte_index", 
            "combineBytes_000815f8": "combine_bytes", 
            "iVar2": "byte_address", 
            "uVar1": "combined_bytes", 
            "iVar5": "output_address", 
            "FUN_00080410": "write_combined_bytes_to_memory_00080410", 
            "param_1": "memory_address", 
            "param_2": "param_2", 
            "param_3": "param_3", 
            "param_4": "param_4", 
            "uVar4": "index"
        }, 
        "code": "void write_combined_bytes_to_memory_00080410(int memory_address, undefined4 param_2, undefined4 param_3, undefined4 param_4)\\n{\\n  byte byte_index = 0;\\n  while (true) {\\n    uint index = (uint)byte_index;\\n    byte_index = byte_index + 1;\\n    if (*(byte *)(memory_address + 0xb) >> 1 <= index) {\\n      break;\\n    }\\n    int byte_address = (index * 2 + 3 & 0xff) + memory_address;\\n    int output_address = *(int *)(memory_address + 0x4c);\\n    undefined2 combined_bytes = combine_bytes(*(undefined *)(byte_address + 9), *(undefined *)(byte_address + 10), byte_address, *(byte *)(memory_address + 0xb), param_4);\\n    *(undefined2 *)(output_address + index * 2) = combined_bytes;\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_000815f8"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080410", 
        "calling": [
            "FUN_0008043e"
        ], 
        "imported": true, 
        "current_name": "write_combined_bytes_to_memory_00080410"
    }, 
    "FUN_00080da0": {
        "renaming": {
            "bVar1": "isNegative", 
            "undefined4": "uint32_t", 
            "FUN_00080da0": "handleParameter_00080da0", 
            "param_1": "parameterAddress", 
            "DAT_00080df8": "function1", 
            "param_2": "parameterType", 
            "param_3": "parameterValue", 
            "param_4": "functionPointer", 
            "DAT_00080dfc": "function2", 
            "DAT_00080e00": "DAT_00080e00"
        }, 
        "code": "uint32_t handleParameter_00080da0(int32_t parameterAddress, int32_t parameterType, uint32_t parameterValue, void* DAT_00080df8, void* DAT_00080dfc)\\n{\\n  switch(parameterType) {\\n    case 1:\\n    case 2:\\n      (*DAT_00080df8)(parameterAddress, parameterType, parameterValue);\\n      bool isNegative = (int32_t)(parameterValue << 0x1f) < 0;\\n      *(uint32_t*)(parameterAddress + 0x44) = parameterValue;\\n      if (isNegative) {\\n        *(uint32_t*)(parameterAddress + 100) = parameterValue;\\n      }\\n      if (!isNegative) {\\n        *(uint32_t*)(parameterAddress + 0x60) = parameterValue;\\n      }\\n      break;\\n    case 3:\\n      (*DAT_00080dfc)(parameterAddress, parameterValue, parameterType, DAT_00080dfc, parameterAddress);\\n      break;\\n    case 4:\\n    case 5:\\n      (*DAT_00080e00)(parameterAddress, parameterValue, parameterType == 5, (parameterValue << 0x1d) >> 0x1f, parameterValue & 1, parameterType, parameterValue);\\n      break;\\n    default:\\n      return 0;\\n  }\\n  return 1;\\n}", 
        "called": [
            "FUN_00080d2e", 
            "FUN_00080d54", 
            "FUN_00080d7a"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080da0", 
        "calling": [
            "FUN_00081210", 
            "FUN_00080ae4"
        ], 
        "imported": true, 
        "current_name": "handleParameter_00080da0"
    }, 
    "FUN_00080258": {
        "renaming": {
            "bVar1": "checksum_index", 
            "iVar3": "function_result", 
            "param_1": "data_array", 
            "FUN_00080258": "update_data_00080258", 
            "param_2": "param_2", 
            "param_3": "param_3", 
            "param_4": "param_4", 
            "uVar2": "checksum", 
            "uVar4": "checksum_value"
        }, 
        "code": "void update_data_00080258(int **data_array, undefined4 param_2, undefined4 param_3, undefined4 param_4)\\n{\\n  byte checksum_index = *(byte *)((int)data_array + 0x49);\\n  uint checksum_value = (uint)checksum_index;\\n  undefined2 checksum = calculate_checksum(data_array,checksum_value,param_3,param_4,param_4);\\n  *(char *)((int)data_array + checksum_value + 9) = (char)((ushort)checksum >> 8);\\n  *(char *)((int)data_array + (checksum_value + 1 & 0xff) + 9) = (char)checksum;\\n  *(byte *)((int)data_array + 0x49) = checksum_index + 2;\\n  byte parameter_index = *(byte *)((int)data_array + 6);\\n  if (parameter_index > 1) {\\n    update_parameter(parameter_index, 1);\\n  }\\n  byte data_type = *(byte *)((int)data_array + 5);\\n  if (data_type < 4) {\\n    (**(code **)(**data_array + 4))(*data_array,(int)data_array + 9,*(undefined *)((int)data_array + 0x49));\\n  }\\n  if (parameter_index > 1) {\\n    update_parameter(parameter_index, 0);\\n  }\\n  if (data_type < 4) {\\n    int function_result;\\n    do {\\n      function_result = (**(code **)(**data_array + 0xc))();\\n    } while (function_result >= 0);\\n  }\\n  *(undefined *)((int)data_array + 0x49) = 0;\\n  int stored_value = get_stored_value_thunk();\\n  data_array[0x17] = (int *)(stored_value + (uint)*(ushort *)((int)data_array + 0x56));\\n  *(short *)((int)data_array + 0x52) = *(short *)((int)data_array + 0x52) + 1;\\n  return;\\n}", 
        "called": [
            "thunk_FUN_00081714", 
            "FUN_00081318", 
            "FUN_0008021c"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080258", 
        "calling": [
            "FUN_000802da"
        ], 
        "imported": true, 
        "current_name": "update_data_00080258"
    }, 
    "FUN_00081622": {
        "renaming": {
            "iVar1": "function_result", 
            "param_1": "data_address", 
            "FUN_00081622": "execute_skipped_function_00081622", 
            "param_2": "data_size", 
            "param_3": "parameter_1", 
            "param_4": "parameter_2"
        }, 
        "code": "int execute_skipped_function_00081622(int *data_address, int data_size, uint32_t parameter_1, uint32_t parameter_2)\\n{\\n  int function_result;\\n  function_result = execute_skipped_function_00081622_with_two_data_points_000825a0(*data_address, data_size + 1, parameter_1, parameter_2, parameter_2);\\n  if (function_result != 0) {\\n    *data_address = function_result;\\n    data_address[1] = data_size;\\n    function_result = 1;\\n  }\\n  return function_result;\\n}", 
        "called": [
            "FUN_000825a0"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081622", 
        "calling": [
            "FUN_0008163a"
        ], 
        "imported": true, 
        "current_name": "execute_skipped_function_00081622"
    }, 
    "FUN_00082438": {
        "renaming": {
            "iVar1": "remainingSize", 
            "puVar2": "currentDestination", 
            "puVar3": "currentSource", 
            "puVar4": "endOfCopy", 
            "param_1": "destination", 
            "puVar6": "endOfSource", 
            "FUN_00082438": "copyMemory_00082438", 
            "param_2": "source", 
            "param_3": "size", 
            "uVar5": "i", 
            "uVar7": "remainingBytes"
        }, 
        "code": "void copyMemory_00082438(void* destination, void* source, uint32_t size)\\n{\\n  if ((source < destination) && ((void*)((int)source + size) > destination)) {\\n    void* endOfSource = (void*)((int)source + size);\\n    void* endOfDestination = (void*)((int)destination + size);\\n    int32_t remainingSize = size - 1;\\n    if (size != 0) {\\n      do {\\n        endOfSource = (void*)((int)endOfSource - 1);\\n        remainingSize = remainingSize - 1;\\n        endOfDestination = (void*)((int)endOfDestination - 1);\\n        *(char*)endOfDestination = *(char*)endOfSource;\\n      } while (remainingSize != -1);\\n    }\\n    return;\\n  }\\n  if (size < 0x10) {\\n    if (size == 0) {\\n      return;\\n    }\\n  }\\n  else if ((((uint32_t)destination | (uint32_t)source) & 3) == 0) {\\n    void* endOfCopy = (void*)((int)destination + (size - 0x10 & 0xfffffff0) + 0x10);\\n    void* currentDestination = destination;\\n    void* currentSource = source;\\n    do {\\n      currentDestination = currentDestination + 16;\\n      *(int32_t*)(currentDestination - 16) = *(int32_t*)(currentSource - 16);\\n      *(int32_t*)(currentDestination - 12) = *(int32_t*)(currentSource - 12);\\n      *(int32_t*)(currentDestination - 8) = *(int32_t*)(currentSource - 8);\\n      *(int32_t*)(currentDestination - 4) = *(int32_t*)(currentSource - 4);\\n      currentSource = currentSource + 16;\\n    } while (currentDestination != endOfCopy);\\n    int32_t remainingSize = (size - 0x10 >> 4) + 1;\\n    uint32_t remainingBytes = size & 0xf;\\n    source = source + remainingSize * 4;\\n    destination = destination + remainingSize * 4;\\n    uint32_t i = remainingBytes;\\n    currentDestination = destination;\\n    currentSource = source;\\n    if (3 < remainingBytes) {\\n      do {\\n        i = i - 4;\\n        *(int32_t*)currentDestination = *(int32_t*)currentSource;\\n        currentDestination = currentDestination + 4;\\n        currentSource = currentSource + 4;\\n      } while (3 < i);\\n      int32_t remainingBytes = (remainingBytes - 4 & 0xfffffffc) + 4;\\n      destination = (void*)((int)destination + remainingBytes);\\n      source = (void*)((int)source + remainingBytes);\\n      remainingBytes = size & 3;\\n    }\\n    size = remainingBytes;\\n  }\\n  char* currentDestination = (char*)destination;\\n  do {\\n    char* nextDestination = currentDestination + 1;\\n    *(char*)currentDestination = *(char*)source;\\n    source = (void*)((int)source + 1);\\n    currentDestination = nextDestination;\\n  } while (currentDestination != (char*)(size + (int)destination));\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00082438", 
        "calling": [
            "FUN_00083f34", 
            "FUN_000825b0"
        ], 
        "imported": true, 
        "current_name": "copyMemory_00082438"
    }, 
    "FUN_00081508": {
        "renaming": {
            "iVar2": "bit_index", 
            "puVar3": "data_structure", 
            "param_1": "data_structure_address", 
            "FUN_00081508": "initialize_data_structure_00081508", 
            "param_2": "param_2", 
            "param_3": "param_3", 
            "puVar1": "DAT_00081570", 
            "setBitInMemory_00080e18": "set_bit_in_memory"
        }, 
        "code": "void initialize_data_structure_00081508(int data_structure_address, uint param_2, undefined4 param_3)\\n{\\n  set_bit_in_memory(*(undefined4 *)(data_structure_address + 0x20));\\n  undefined4 *data_structure = *(undefined4 **)(data_structure_address + 0x18);\\n  data_structure[0x48] = 0x202;\\n  *data_structure = 0xac;\\n  uint *DAT_00081570 = PTR_DAT_00081570;\\n  data_structure[1] = param_3;\\n  data_structure[8] = *DAT_00081570 / param_2 >> 4;\\n  data_structure[3] = 0xffffffff;\\n  data_structure[2] = 0x61;\\n  int bit_index = (uint)(int)(char)*(byte *)(data_structure_address + 0x1c) >> 5;\\n  *(int *)(DAT_00081574 + bit_index * 4) = 1 << (uint)(*(byte *)(data_structure_address + 0x1c) & 0x1f);\\n  int first_structure_address = *(int *)(data_structure_address + 0x10);\\n  *(undefined4 *)(first_structure_address + 0x84) = 0;\\n  *(undefined4 *)(first_structure_address + 0x80) = 0;\\n  int second_structure_address = *(int *)(data_structure_address + 0x14);\\n  *(undefined4 *)(second_structure_address + 0x84) = 0;\\n  *(undefined4 *)(second_structure_address + 0x80) = 0;\\n  *data_structure = 0x50;\\n  return;\\n}", 
        "called": [
            "FUN_00080e18"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00081508", 
        "calling": [], 
        "imported": true, 
        "current_name": "initialize_data_structure_00081508"
    }, 
    "FUN_00083808": {
        "renaming": {
            "temp": "temp_value", 
            "iVar2": "data_value", 
            "uVar1": "temp", 
            "parameter_value": "parameter", 
            "param_1": "status", 
            "odd_or_even": "odd_or_even_value", 
            "FUN_00083808": "check_parameter_and_update_data_00083808", 
            "param_2": "data", 
            "parameter": "parameter_value", 
            "uVar3": "parameter", 
            "uVar4": "parameter_value"
        }, 
        "code": "undefined4 check_parameter_and_update_data_00083808(uint32_t *status, int *data)\\n{\\n  uint32_t temp_value;\\n  int data_value;\\n  uint16_t parameter_value;\\n  parameter_value = *(uint16_t *)(data + 3);\\n  uint32_t parameter = (uint32_t)parameter_value;\\n  if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\\n    execute_skipped_function_00083b14();\\n  }\\n  if ((int)(parameter << 0x1c) < 0) {\\n    data_value = data[4];\\n  }\\n  else {\\n    if (-1 < (int)(parameter << 0x1b)) {\\n      *status = 9;\\n      *(uint16_t *)(data + 3) = parameter_value | 0x40;\\n      return 0xffffffff;\\n    }\\n    if ((int)(parameter << 0x1d) < 0) {\\n      if ((int *)data[0xc] != (int *)0x0) {\\n        if ((int *)data[0xc] != data + 0x10) {\\n          execute_skipped_function_00083d9c(status);\\n          parameter_value = *(uint16_t *)(data + 3);\\n        }\\n        data[0xc] = 0;\\n      }\\n      data_value = data[4];\\n      parameter_value = parameter_value & 0xffdb;\\n      *data = data_value;\\n      data[1] = 0;\\n    }\\n    else {\\n      data_value = data[4];\\n    }\\n    *(uint16_t *)(data + 3) = parameter_value | 8;\\n    temp_value = (uint32_t)(parameter_value | 8);\\n  }\\n  if ((data_value == 0) && ((temp_value & 0x280) != 0x200)) {\\n    update_parameter(status, data);\\n    temp_value = (uint32_t)*(uint16_t *)(data + 3);\\n    data_value = data[4];\\n  }\\n  uint32_t odd_or_even = temp_value & 1;\\n  if (odd_or_even == 0) {\\n    if (-1 < (int)(temp_value << 0x1e)) {\\n      odd_or_even = data[5];\\n    }\\n    data[2] = odd_or_even;\\n  }\\n  else {\\n    data[6] = -data[5];\\n    data[2] = 0;\\n  }\\n  if ((data_value == 0) && ((int)((uint)*(uint16_t *)(data + 3) << 0x18) < 0)) {\\n    *(uint16_t *)(data + 3) = *(uint16_t *)(data + 3) | 0x40;\\n    return 0xffffffff;\\n  }\\n  return 0;\\n}", 
        "called": [
            "FUN_00083d9c", 
            "FUN_00083b14", 
            "FUN_000842a4"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00083808", 
        "calling": [
            "FUN_00083f34", 
            "FUN_000844c4", 
            "FUN_00082b38"
        ], 
        "imported": true, 
        "current_name": "check_parameter_and_update_data_00083808"
    }, 
    "FUN_000847e0": {
        "renaming": {
            "FUN_000847e0": "FUNC_000847e0"
        }, 
        "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n", 
        "called": [], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x000847e0", 
        "calling": [
            "FUN_0008477c"
        ], 
        "current_name": "FUNC_000847e0"
    }, 
    "FUN_0008105c": {
        "renaming": {
            "param_1": "integerPointer", 
            "param_2": "bitIndex", 
            "FUN_0008105c": "setBitInInteger_0008105c"
        }, 
        "code": "void setBitInInteger_0008105c(int* integerPointer, uint8_t bitIndex)\\n{\\n  uint32_t bitMask = 1 << (bitIndex & 0xff);\\n  *integerPointer |= bitMask;\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008105c", 
        "calling": [
            "FUN_00081210"
        ], 
        "imported": true, 
        "current_name": "setBitInInteger_0008105c"
    }, 
    "FUN_0008456c": {
        "renaming": {
            "iVar2": "return_value", 
            "pcVar3": "function_pointer", 
            "uVar1": "constant_value", 
            "param_1": "output_value", 
            "getConstantValue_00084290": "get_constant_value", 
            "param_2": "input_value", 
            "param_3": "param_3", 
            "param_4": "output_parameter", 
            "FUN_0008456c": "execute_function_with_parameters_0008456c", 
            "auStack_24": "stack_array"
        }, 
        "code": "void execute_function_with_parameters_0008456c(undefined4 *output_value, int input_value, undefined4 param_3, undefined4 *param_4)\\n{\\n  undefined4 constant_value = get_constant_value();\\n  code *function_pointer = *(code **)PTR_DAT_000845b8;\\n  int return_value;\\n  if (input_value == 0) {\\n    return_value = (*function_pointer)(output_value, auStack24, 0, constant_value, param_4);\\n  }\\n  else {\\n    return_value = (*function_pointer)(output_value, input_value, param_3, constant_value, param_4);\\n  }\\n  if (return_value == -1) {\\n    *param_4 = 0;\\n    *output_value = 0x8a;\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_000845bc", 
            "FUN_00084290"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008456c", 
        "calling": [
            "FUN_00083c40"
        ], 
        "imported": true, 
        "current_name": "execute_function_with_parameters_0008456c"
    }, 
    "FUN_00080aba": {
        "renaming": {
            "FUN_00080aba": "doNothing_00080aba"
        }, 
        "code": "void doNothing_00080aba(void)\\n{\\n  // This function does nothing\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080aba", 
        "calling": [
            "FUN_00080ce0"
        ], 
        "imported": true, 
        "current_name": "doNothing_00080aba"
    }, 
    "FUN_00080abc": {
        "renaming": {
            "FUN_00080abc": "doNothing_00080abc"
        }, 
        "code": "void doNothing_00080abc(void)\\n{\\n  // This function does nothing\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080abc", 
        "calling": [
            "FUN_00080ce0"
        ], 
        "imported": true, 
        "current_name": "doNothing_00080abc"
    }, 
    "FUN_000811b4": {
        "renaming": {
            "param_1": "integer", 
            "param_2": "flagIndex", 
            "FUN_000811b4": "setFlagInInteger_000811b4"
        }, 
        "code": "undefined4 setFlagInInteger_000811b4(undefined4 integer, int flagIndex)\\n{\\n  *(undefined4 *)((int)integer + 4) = 0x2000;\\n  return 0;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000811b4", 
        "calling": [
            "FUN_000846b4"
        ], 
        "imported": true, 
        "current_name": "setFlagInInteger_000811b4"
    }, 
    "FUN_000816d4": {
        "renaming": {
            "DAT_000816dc": "globalVariable", 
            "FUN_000816d4": "setFlagInGlobalVariable_000816d4"
        }, 
        "code": "void setFlagInGlobalVariable_000816d4(void)\\n{\\n  *(undefined4 *)(DAT_000816dc + 4) = 0x8000;\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000816d4", 
        "calling": [
            "FUN_000816a8"
        ], 
        "imported": true, 
        "current_name": "setFlagInGlobalVariable_000816d4"
    }, 
    "FUN_00083f34": {
        "renaming": {
            "FUN_00083f34": "FUNC_00083f34"
        }, 
        "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = check_parameter_and_update_data_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                FUNC_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  FUNC_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            copyMemory_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            copyMemory_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUNC_00083adc(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = findCharInBuffer_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            copyMemory_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUNC_00083adc(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            copyMemory_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUNC_00083adc(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n", 
        "called": [
            "FUN_00083d9c", 
            "FUN_00083808", 
            "FUN_0008234c", 
            "FUN_00081e14", 
            "FUN_00084384", 
            "FUN_00082438", 
            "FUN_000825b0", 
            "FUN_00083adc"
        ], 
        "skipped": true, 
        "improved": false, 
        "entrypoint": "0x00083f34", 
        "calling": [
            "FUN_00082ac0"
        ], 
        "current_name": "FUNC_00083f34"
    }, 
    "FUN_00080d7a": {
        "renaming": {
            "FUN_00080d7a": "setValuesInArray_00080d7a", 
            "param_1": "array", 
            "param_2": "value", 
            "param_3": "index1", 
            "param_4": "index2", 
            "param_5": "index3"
        }, 
        "code": "void setValuesInArray_00080d7a(undefined4* array, undefined4 value, int index1, int index2, int index3)\\n{\\n  array[17] = value;\\n  if (index3 == 0) {\\n    array[24] = value;\\n  }\\n  else {\\n    array[25] = value;\\n  }\\n  if (index2 == 0) {\\n    array[21] = value;\\n  }\\n  else {\\n    array[20] = value;\\n  }\\n  if (index1 == 0) {\\n    array[13] = value;\\n  }\\n  else {\\n    array[12] = value;\\n  }\\n  array[4] = value;\\n  *array = value;\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080d7a", 
        "calling": [
            "FUN_00081318", 
            "FUN_00080da0"
        ], 
        "imported": true, 
        "current_name": "setValuesInArray_00080d7a"
    }, 
    "FUN_00080e9c": {
        "renaming": {
            "DAT_00080f1c": "register6Value", 
            "DAT_00080f0c": "register2Address", 
            "FUN_00080e9c": "initializeRegisters_00080e9c", 
            "DAT_00080f14": "register3Value", 
            "DAT_00080f18": "register5Value", 
            "DAT_00080f08": "registerArray", 
            "DAT_00080f20": "register6Address", 
            "DAT_00080f10": "register4Value"
        }, 
        "code": "void initializeRegisters_00080e9c(void)\\n{\\n  uint32_t* register1 = DAT_00080f08;\\n  *register1 = 0x400;\\n  register1[128] = 0x400;\\n  uint32_t* register2 = DAT_00080f0c;\\n  if (-1 < (*(int *)(register2 + 8) << 7)) {\\n    *(undefined4 *)(register2 + 8) = DAT_00080f14;\\n    do {\\n    } while (-1 < (*(int *)(register2 + 0x68) << 0x1f));\\n  }\\n  *(undefined4 *)(register2 + 8) = DAT_00080f10;\\n  do {\\n  } while (-1 < (*(int *)(register2 + 0x68) << 0xf));\\n  *(uint *)(register2 + 0xc) = (*(uint *)(register2 + 0xc) & 0xfffffffc) | 1;\\n  do {\\n  } while (-1 < (*(int *)(register2 + 0x68) << 0x1c));\\n  *(undefined4 *)(register2 + 0x10) = DAT_00080f18;\\n  do {\\n  } while (-1 < (*(int *)(register2 + 0x68) << 0x1e));\\n  *(uint *)(register2 + 0xc) = 0x11;\\n  do {\\n  } while (-1 < (*(int *)(register2 + 0x68) << 0x1c));\\n  *(uint *)(register2 + 0xc) = 0x12;\\n  do {\\n  } while (-1 < (*(int *)(register2 + 0x68) << 0x1c));\\n  *register6 = DAT_00080f1c;\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00080e9c", 
        "calling": [
            "FUN_00080ae4"
        ], 
        "imported": true, 
        "current_name": "initializeRegisters_00080e9c"
    }, 
    "FUN_00084464": {
        "renaming": {
            "sVar1": "bytes_to_write", 
            "writeBytesToMemory_000811cc": "write_bytes_to_memory", 
            "iVar3": "write_result", 
            "FUN_00084464": "write_bytes_to_memory_00084464", 
            "puVar2": "PTR_DAT_000845fc", 
            "param_1": "result", 
            "set_param_to_zero_if_return_is_negative_00084700": "set_param_to_zero_if_return_is_negative", 
            "param_2": "parameter_data_index", 
            "param_3": "start_address", 
            "param_4": "end_address", 
            "uVar4": "parameter_flags", 
            "in_lr": "in_lr"
        }, 
        "code": "void write_bytes_to_memory_00084464(int* result, int parameter_data_index, undefined4 start_address, undefined4 end_address)\\n{\\n  ushort parameter_flags = *(ushort *)(parameter_data_index + 0xc);\\n  if ((int)((uint)parameter_flags << 0x17) < 0) {\\n    set_param_to_zero_if_return_is_negative(param_1, *(short *)(parameter_data_index + 0xe), 0, 2);\\n    parameter_flags = *(ushort *)(parameter_data_index + 0xc);\\n  }\\n  *(ushort *)(parameter_data_index + 0xc) = parameter_flags & 0xefff;\\n  int bytes_to_write = *(short *)(parameter_data_index + 0xe);\\n  *(undefined4 *)PTR_DAT_000845fc = 0;\\n  int write_result = write_bytes_to_memory_00084464(bytes_to_write, start_address, end_address);\\n  if ((write_result == -1) && (*(int *)PTR_DAT_000845fc != 0)) {\\n    *result = *(int *)PTR_DAT_000845fc;\\n    return;\\n  }\\n  return;\\n}", 
        "called": [
            "FUN_00084700", 
            "FUN_000811cc"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00084464", 
        "calling": [], 
        "imported": true, 
        "current_name": "write_bytes_to_memory_00084464"
    }, 
    "FUN_000811ae": {
        "renaming": {
            "FUN_000811ae": "returnError_000811ae"
        }, 
        "code": "uint32_t returnError_000811ae(void)\\n{\\n  return 0xffffffff;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000811ae", 
        "calling": [], 
        "imported": true, 
        "current_name": "returnError_000811ae"
    }, 
    "FUN_0008118c": {
        "renaming": {
            "PTR_DAT_000811a0": "globalVariablePointer", 
            "param_1": "value", 
            "FUN_0008118c": "addToGlobalVariable_0008118c", 
            "DAT_000811a4": "initialValue"
        }, 
        "code": "int addToGlobalVariable_0008118c(int value)\\n{\\n  undefined* globalVariableAddress = PTR_DAT_000811a0;\\n  if (*(int*)PTR_DAT_000811a0 == 0) {\\n    *(undefined4*)PTR_DAT_000811a0 = DAT_000811a4;\\n  }\\n  int currentValue = *(int*)globalVariableAddress;\\n  *(int*)globalVariableAddress = value + currentValue;\\n  return currentValue;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008118c", 
        "calling": [
            "FUN_00082970"
        ], 
        "imported": true, 
        "current_name": "addToGlobalVariable_0008118c"
    }, 
    "FUN_00082a50": {
        "renaming": {
            "param_1": "address", 
            "FUN_00082a50": "findNullTerminatorIndex_00082a50"
        }, 
        "code": "int findNullTerminatorIndex_00082a50(uint32_t address)\\n{\\n  int index = -(address & 3);\\n  uint32_t word = *(uint32_t*)(address & 0xfffffffc);\\n  if ((address & 3) != 0) {\\n    word = word | 0xffffffffU >> ((index + 4U & 0x1f) << 3);\\n  }\\n  while ((word + 0xfefefeff & ~word & 0x80808080) == 0) {\\n    index = index + 4;\\n    word = *(uint32_t*)((address & 0xfffffffc) + index);\\n  }\\n  bool byte1 = (word & 0xff) == 0;\\n  if (!byte1) {\\n    index = index + 1;\\n    byte1 = (word & 0xff00) == 0;\\n  }\\n  if (!byte1) {\\n    index = index + 1;\\n    byte1 = (word & 0xff0000) == 0;\\n  }\\n  if (!byte1) {\\n    index = index + 1;\\n  }\\n  return index;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00082a50", 
        "calling": [
            "FUN_00081682", 
            "FUN_00082b38"
        ], 
        "imported": true, 
        "current_name": "findNullTerminatorIndex_00082a50"
    }, 
    "FUN_0008106e": {
        "renaming": {
            "param_1": "parameterAddress", 
            "param_2": "parameterValue", 
            "FUN_0008106e": "setParameterValue_0008106e"
        }, 
        "code": "void setParameterValue_0008106e(int parameterAddress, uint32_t parameterValue)\\n{\\n  *(uint32_t*)(parameterAddress + 0x28) = parameterValue;\\n  return;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x0008106e", 
        "calling": [
            "FUN_00080ae4"
        ], 
        "imported": true, 
        "current_name": "setParameterValue_0008106e"
    }, 
    "FUN_000811c2": {
        "renaming": {
            "FUN_000811c2": "returnZero_000811c2"
        }, 
        "code": "int returnZero_000811c2(void)\\n{\\n  return 0;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000811c2", 
        "calling": [
            "FUN_00084700"
        ], 
        "imported": true, 
        "current_name": "returnZero_000811c2"
    }, 
    "FUN_000811c6": {
        "renaming": {
            "FUN_000811c6": "returnZero_000811c6"
        }, 
        "code": "int returnZero_000811c6(void)\\n{\\n  return 0;\\n}", 
        "called": [], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x000811c6", 
        "calling": [
            "FUN_00084728"
        ], 
        "imported": true, 
        "current_name": "returnZero_000811c6"
    }, 
    "FUN_00083d00": {
        "renaming": {
            "iVar1": "memory_block_start", 
            "iVar3": "set_param_result", 
            "iVar5": "new_block_size", 
            "puVar2": "PTR_DAT_00083d94", 
            "param_1": "param_1", 
            "doNothing_0008259c": "do_nothing_2", 
            "param_2": "bytes_to_allocate", 
            "doNothing_00082598": "do_nothing", 
            "DAT_00083d98": "DAT_00083d98", 
            "FUN_00083d00": "adjust_memory_allocation_size_00083d00", 
            "uVar4": "memory_block_size", 
            "set_param_to_global_var_if_return_is_negative_00082970": "set_param_to_global_var_if_return_is_negative"
        }, 
        "code": "undefined4 adjust_memory_allocation_size_00083d00(undefined4 param_1, int bytes_to_allocate)\\n{\\n  int memory_block_start = DAT_00083d90;\\n  do_nothing();\\n  uint memory_block_size = *(uint *)(*(int *)(memory_block_start + 8) + 4) & 0xfffffffc;\\n  int new_block_size = ((memory_block_size - bytes_to_allocate) + 0xfef & 0xfffff000) - 0x1000;\\n  if (new_block_size > 0xfff) {\\n    int set_param_result = set_param_to_global_var_if_return_is_negative(param_1, 0);\\n    if (set_param_result == *(int *)(memory_block_start + 8) + memory_block_size) {\\n      set_param_result = set_param_to_global_var_if_return_is_negative(param_1, -new_block_size);\\n      undefined *memory_offset_ptr = PTR_DAT_00083d94;\\n      if (set_param_result != -1) {\\n        int ptr_offset = *(int *)memory_offset_ptr;\\n        *(uint *)(*(int *)(memory_block_start + 8) + 4) = memory_block_size - new_block_size | 1;\\n        *(int *)memory_offset_ptr = ptr_offset - new_block_size;\\n        do_nothing_2(param_1);\\n        return 1;\\n      }\\n      new_block_size = set_param_to_global_var_if_return_is_negative(param_1, 0);\\n      memory_offset_ptr = PTR_DAT_00083d94;\\n      uint ptr_diff = new_block_size - *(int *)(memory_block_start + 8);\\n      if (ptr_diff > 0xf) {\\n        int *DAT_00083d98 = DAT_00083d98;\\n        *(uint *)(*(int *)(memory_block_start + 8) + 4) = ptr_diff | 1;\\n        *(int *)memory_offset_ptr = new_block_size - *DAT_00083d98;\\n      }\\n    }\\n  }\\n  do_nothing_2(param_1);\\n  return 0;\\n}", 
        "called": [
            "FUN_0008259c", 
            "FUN_00082970", 
            "FUN_00082598"
        ], 
        "skipped": false, 
        "improved": true, 
        "entrypoint": "0x00083d00", 
        "calling": [
            "FUN_00083d9c"
        ], 
        "imported": true, 
        "current_name": "adjust_memory_allocation_size_00083d00"
    }
}